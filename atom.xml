<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JIANGPAN</title>
  
  
  <link href="https://jiangqqpan.github.io/atom.xml" rel="self"/>
  
  <link href="https://jiangqqpan.github.io/"/>
  <updated>2023-10-15T08:18:20.689Z</updated>
  <id>https://jiangqqpan.github.io/</id>
  
  <author>
    <name>JP</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://jiangqqpan.github.io/2023/08/29/hello-world/"/>
    <id>https://jiangqqpan.github.io/2023/08/29/hello-world/</id>
    <published>2023-08-29T10:34:25.732Z</published>
    <updated>2023-10-15T08:18:20.689Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="https://jiangqqpan.github.io/2023/08/29/Linux/"/>
    <id>https://jiangqqpan.github.io/2023/08/29/Linux/</id>
    <published>2023-08-29T10:30:18.000Z</published>
    <updated>2023-10-15T08:18:53.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu20-04网络问号"><a href="#ubuntu20-04网络问号" class="headerlink" title="ubuntu20.04网络问号"></a>ubuntu20.04网络问号</h1><p><a href="https://blog.csdn.net/qq_29391659/article/details/128471637">https://blog.csdn.net/qq_29391659/article/details/128471637</a></p><p>终端输入命令 配置静态地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dhclient -v</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ubuntu20-04网络问号&quot;&gt;&lt;a href=&quot;#ubuntu20-04网络问号&quot; class=&quot;headerlink&quot; title=&quot;ubuntu20.04网络问号&quot;&gt;&lt;/a&gt;ubuntu20.04网络问号&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>esp8266+wifi</title>
    <link href="https://jiangqqpan.github.io/2023/06/27/esp8266-wifi/"/>
    <id>https://jiangqqpan.github.io/2023/06/27/esp8266-wifi/</id>
    <published>2023-06-27T11:36:25.000Z</published>
    <updated>2023-10-15T08:18:11.378Z</updated>
    
    <content type="html"><![CDATA[<h4 id="STM32CubeMX-ESP8266-AT指令实现MQTT协议并接入阿里云IOT平台源码解析"><a href="#STM32CubeMX-ESP8266-AT指令实现MQTT协议并接入阿里云IOT平台源码解析" class="headerlink" title="STM32CubeMX ESP8266 AT指令实现MQTT协议并接入阿里云IOT平台源码解析"></a>STM32CubeMX ESP8266 AT指令实现MQTT协议并接入阿里云IOT平台源码解析</h4><p>参考博客：<a href="https://blog.csdn.net/u014779536/article/details/106355346">https://blog.csdn.net/u014779536/article/details/106355346</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;STM32CubeMX-ESP8266-AT指令实现MQTT协议并接入阿里云IOT平台源码解析&quot;&gt;&lt;a href=&quot;#STM32CubeMX-ESP8266-AT指令实现MQTT协议并接入阿里云IOT平台源码解析&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C语言</title>
    <link href="https://jiangqqpan.github.io/2023/06/04/C%E8%AF%AD%E8%A8%80/"/>
    <id>https://jiangqqpan.github.io/2023/06/04/C%E8%AF%AD%E8%A8%80/</id>
    <published>2023-06-04T13:56:48.000Z</published>
    <updated>2023-10-15T08:17:46.353Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-不同的数据类型所占的字节数"><a href="#1-不同的数据类型所占的字节数" class="headerlink" title="1.不同的数据类型所占的字节数"></a>1.不同的数据类型所占的字节数</h4><hr><p>16位编译器<br>char ：1个字节<br><em><em>char</em>(即指针变量): 2个字节</em>*<br>short int : 2个字节<br><strong>int：  2个字节</strong><br><strong>unsigned int : 2个字节</strong><br>float:  4个字节<br>double:   8个字节<br>long:   4个字节<br>long long:  8个字节<br>unsigned long:  4个字节</p><hr><p>32位编译器<br>char ：1个字节<br><strong>char*（即指针变量）: 4个字节（32位的寻址空间是2^32, 即32个bit，也就是4个字节。同理64位编译器）</strong><br>short int : 2个字节<br><strong>int：  4个字节</strong><br><strong>unsigned int : 4个字节</strong><br>float:  4个字节<br>double:   8个字节<br>long:   4个字节<br>long long:  8个字节<br>unsigned long:  4个字节</p><hr><p>64位编译器</p><p>char ：1个字节<br><em><em>char</em>(即指针变量): 8个字节</em>*<br>short int : 2个字节<br><strong>int：  4个字节</strong><br><strong>unsigned int : 4个字节</strong><br>float:  4个字节<br>double:   8个字节<br><strong>long:   8个字节</strong><br>long long:  8个字节</p><p>unsigned long:  <strong>8个字节</strong></p><h4 id="2-各种声明的格式"><a href="#2-各种声明的格式" class="headerlink" title="2.各种声明的格式"></a>2.各种声明的格式</h4><p>例如：</p><p>函数声明</p><p>typedef</p><p>…….</p><h4 id="3-数字逻辑真值表"><a href="#3-数字逻辑真值表" class="headerlink" title="3.数字逻辑真值表"></a>3.数字逻辑真值表</h4><p>输入A B C 输出Y</p><p>输入布尔型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义真值表中的输入变量个数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM_INPUTS 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义真值表的行数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM_ROWS 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 真值表的输入和输出数据</span></span><br><span class="line"><span class="type">int</span> truthTable[NUM_ROWS][NUM_INPUTS + <span class="number">1</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现真值表中对应的关系的函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">computeOutput</span><span class="params">(<span class="type">int</span> inputs[NUM_INPUTS])</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_ROWS; i++) &#123;</span><br><span class="line">        <span class="type">int</span> match = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; NUM_INPUTS; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputs[j] != truthTable[i][j]) &#123;</span><br><span class="line">                match = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (match) &#123;</span><br><span class="line">            <span class="keyword">return</span> truthTable[i][NUM_INPUTS];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 如果没有找到匹配的行，则返回-1（可以根据实际情况修改返回值）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 测试函数</span></span><br><span class="line">    <span class="type">int</span> inputs[NUM_INPUTS] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;; <span class="comment">// 输入值</span></span><br><span class="line">    <span class="type">int</span> result = computeOutput(inputs); <span class="comment">// 调用函数计算输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Output: %d\n&quot;</span>, result);     <span class="comment">// 打印结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-各种排序方法"><a href="#4-各种排序方法" class="headerlink" title="4.各种排序方法"></a>4.各种排序方法</h4><p>例如：冒泡排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span><span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span><span class="number">-1</span>- i ; j++)</span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[j +<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp = a[j];</span><br><span class="line">a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">a[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择排序法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span><span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; <span class="number">10</span> ; j++)</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; a[j ])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp = a[i];</span><br><span class="line">a[i] = a[j];</span><br><span class="line">a[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-程序编写"><a href="#5-程序编写" class="headerlink" title="5.程序编写"></a>5.程序编写</h4><p>例1：</p><p>一个生产线有K台设备同时工作，用一个数组ns存储每项产品加工所需的时间，以及给出数组的长度为len</p><p>求最小总用时 和 哪几项产品给同一台设备完成</p><p>例：输入 k&#x3D;3  ns[len]&#x3D;{4 5 7 1 3 }     len&#x3D;5 总共三个输入</p><p>k 代表总共有3台设备</p><p>ns[len]&#x3D;{4 5 7 1 3 }   代表总共有len件产品需要加工，每件产品加工所需的时间分别为 4、 5 、7 、1、 3分钟</p><p>请计算出怎么分配那些产品给那台设备加工，使得总加工时长可以最短？</p><p>输出格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>        <span class="comment">//表示完成所有加工总的最短用时为7分钟</span></span><br><span class="line"><span class="number">0</span> <span class="number">4</span>      <span class="comment">//3 4 表示工作0和工作4由同一台完成</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span>      <span class="comment">//1 5 表示工作1和工作3由同一台完成</span></span><br><span class="line"><span class="number">2</span>        <span class="comment">//7   表示工作2由同一台完成</span></span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>给出任意的 k  ns  len  ,编写C语言程序实现功能</p><h4 id="6-C语言数据运算"><a href="#6-C语言数据运算" class="headerlink" title="6.C语言数据运算"></a>6.C语言数据运算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">15</span>, y = <span class="number">8</span>;</span><br><span class="line"><span class="type">float</span> z;</span><br><span class="line"></span><br><span class="line">z = x / y;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;z = %f\n&quot;</span>,z);</span><br><span class="line"></span><br><span class="line">z = (<span class="type">float</span>)(x / y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;z = %f\n&quot;</span>, z);</span><br><span class="line"></span><br><span class="line">z = (<span class="type">float</span>)x / y;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;z = %f\n&quot;</span>, z);</span><br><span class="line"></span><br><span class="line">z = x / (<span class="type">float</span>)y;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;z = %f\n&quot;</span>, z);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">z = <span class="number">1.000000</span></span><br><span class="line">z = <span class="number">1.000000</span></span><br><span class="line">z = <span class="number">1.875000</span></span><br><span class="line">z = <span class="number">1.875000</span></span><br></pre></td></tr></table></figure><h4 id="7-define宏定义仅仅只是单纯的替换（只做替换，不做计算）"><a href="#7-define宏定义仅仅只是单纯的替换（只做替换，不做计算）" class="headerlink" title="7.define宏定义仅仅只是单纯的替换（只做替换，不做计算）"></a>7.define宏定义仅仅只是单纯的替换（只做替换，不做计算）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N M+1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;M*N=%d\n&quot;</span>, M * N);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M*N=<span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="8-数组首地址是一个常量指针"><a href="#8-数组首地址是一个常量指针" class="headerlink" title="8.数组首地址是一个常量指针"></a>8.数组首地址是一个常量指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*int a[5] = &#123;0,1,2,3,4&#125;; int * pa = a; 以下与a[2]等价的表达式为？</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*A.pa +=2; *pa++;  //*的优先级大于自增运算符（++）的优先级</span></span><br><span class="line"><span class="comment">*B.pa +=2; ++*pa;</span></span><br><span class="line"><span class="comment">*C.a +=2; *a;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">    A<span class="number">.2</span></span><br><span class="line">    B<span class="number">.3</span></span><br><span class="line">    C.数组名是一个数组的首地址指针，它是一个常量指针，不能被修改。</span><br></pre></td></tr></table></figure><h4 id="9-sizeof（运算符）和strlen（函数）的区别"><a href="#9-sizeof（运算符）和strlen（函数）的区别" class="headerlink" title="9.sizeof（运算符）和strlen（函数）的区别"></a>9.sizeof（运算符）和strlen（函数）的区别</h4><p>文档链接：<a href="https://blog.csdn.net/qq_47908816/article/details/123964670">https://blog.csdn.net/qq_47908816/article/details/123964670</a></p><p>使用strlen函数，需要对应的头文件#include &lt;string.h&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span>* p = str;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(n));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(str));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(str));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(p));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>strlen&#x3D;string length，顾名思义，该函数是用来求解字符串的长度的。简单来说就是求出字符串的实际长度；</p><p>记住任何一个字符串的结尾都会隐藏一个“\0”，他是字符串的结束标志，而sizeof在计算时会添加上这一项，一般结果为字符串的实际长度+“\0”</p><p>数组的结束标志问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span> &#125;;</span><br><span class="line"><span class="type">char</span> arr2[] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;\0&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr1));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr2));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">19</span>   <span class="comment">//结果于预期不符</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>问题原因：对于arr1数组来说，没有在数组中额外存储”\0”，所以编译器在读取时，并不会像我们所期望的那样停止读取，故长度当然不会时6，至于为什么是38，是因为在读取时，编译器读取完arr1时会继续往后读取，直到读取到”\0”，arr1在读取完第38个字符后才会遇到”\0”；由于每个人的电脑和编译器不同，读取的长度也不一样，所以arr1这种情况一般我们认为它读取的结果为随机值！！！</p><p>sizeof：</p><p>相比strlen函数，sizeof就简单多了，sizeof其实就是一个<em><strong>运算符</strong></em>，主要用来计算所占空间字节的大小。</p><h4 id="10-重新实现strcpy-char-A-const-char-B-函数"><a href="#10-重新实现strcpy-char-A-const-char-B-函数" class="headerlink" title="10.重新实现strcpy(char *A , const char *B)函数"></a>10.重新实现strcpy(char *A , const char *B)函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_strcpy</span><span class="params">(<span class="type">char</span> *A, <span class="type">const</span> <span class="type">char</span> *B)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (*B) &#123;</span><br><span class="line">        *A = *B;</span><br><span class="line">        A++;</span><br><span class="line">        B++;</span><br><span class="line">    &#125;</span><br><span class="line">    *A = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 在A的末尾添加null字符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> destination[<span class="number">100</span>];</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> source[] = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    my_strcpy(destination, source);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Copied string: %s\n&quot;</span>, destination);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11-如果a是个数组，则a和-amp-a之间的区别"><a href="#11-如果a是个数组，则a和-amp-a之间的区别" class="headerlink" title="11.如果a是个数组，则a和&amp;a之间的区别"></a>11.如果a是个数组，则a和&amp;a之间的区别</h4><p>1）a和&amp;a</p><p>a:数组名，表示数组中第一个元素的地址</p><p>&amp;a:整个数组在内存中的起始地址</p><p>a &#x3D;&#x3D; &amp;a（两者对应的值是相同的，但其所代表的含义并不相同）</p><p>区别：</p><p>a:指向的的是数组中元素的地址</p><p>&amp;a ：指向的是整个数组作为一个单元的起始地址</p><h4 id="12-大小端模式"><a href="#12-大小端模式" class="headerlink" title="12.大小端模式"></a>12.大小端模式</h4><p>大端模式:数据的低位放在内存高地址中，数据的高位放在内存的低地址中</p><p>小端模式:数据的高位放在内存高地址中，数据的低位放在内存的低地址中</p><h4 id="13-C-中空类占用内存空间大小（大小为1个字节）"><a href="#13-C-中空类占用内存空间大小（大小为1个字节）" class="headerlink" title="13.C++中空类占用内存空间大小（大小为1个字节）"></a>13.C++中空类占用内存空间大小（大小为1个字节）</h4><h4 id="14-假设有a-b两个变量，在不使用第三个变量的情况下，交换a-b两个变量的值"><a href="#14-假设有a-b两个变量，在不使用第三个变量的情况下，交换a-b两个变量的值" class="headerlink" title="14.假设有a, b两个变量，在不使用第三个变量的情况下，交换a, b两个变量的值"></a>14.假设有a, b两个变量，在不使用第三个变量的情况下，交换a, b两个变量的值</h4><p>a &#x3D; a + b;</p><p>b &#x3D; a - b;</p><p>a &#x3D; a - b;</p><h4 id="14-一级指针和二级指针"><a href="#14-一级指针和二级指针" class="headerlink" title="14.一级指针和二级指针"></a>14.一级指针和二级指针</h4><p>一级指针:<br>int *pt;     –&gt; pt指针指向的地址里面存放的是int类型的数据</p><p>二级指针:<br>int **pt;    –&gt; pt指针指向的地址里面存放的是一个指向整型变量的地址</p><h4 id="15-大疆笔试"><a href="#15-大疆笔试" class="headerlink" title="15 .大疆笔试"></a>15 .大疆笔试</h4><p><img src="https://pic.imgdb.cn/item/64d4fe571ddac507cc883e45.png"></p><p><img src="https://pic.imgdb.cn/item/64d4fec51ddac507cc8972a7.png"></p><p><img src="https://pic.imgdb.cn/item/64d4fefb1ddac507cc8a12ad.png"></p><h4 id="16-CISC和RISC"><a href="#16-CISC和RISC" class="headerlink" title="16.CISC和RISC"></a>16.CISC和RISC</h4><p><img src="https://pic.imgdb.cn/item/64d4ff651ddac507cc8b2a18.png"></p><p><img src="https://pic.imgdb.cn/item/64d4ff721ddac507cc8b4c51.png"></p><h4 id="17-广州众远智慧科技有限公司-笔试"><a href="#17-广州众远智慧科技有限公司-笔试" class="headerlink" title="17.广州众远智慧科技有限公司(笔试)"></a>17.广州众远智慧科技有限公司(笔试)</h4><p><img src="https://pic.imgdb.cn/item/64d4ffb91ddac507cc8c03ab.png"></p><h4 id="18-C语言实现以下功能"><a href="#18-C语言实现以下功能" class="headerlink" title="18.C语言实现以下功能"></a>18.C语言实现以下功能</h4><p>输入m和n</p><p>m代表要输入的IP个数</p><p>n代表m个IP中互相连接的组数</p><p>接下来输入m组IP地址以及每组IP地址的序号</p><p>然后输入n组两两连通的IP地址的序号</p><p>接下来输入要测试连通性的IP组数q</p><p>接下来输入q组IP地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入示例：</span><br><span class="line"><span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> <span class="number">1</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span> <span class="number">2</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.3</span> <span class="number">3</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.4</span> <span class="number">4</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.5</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.3</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.4</span></span><br><span class="line">输出示例：</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><p>完整的示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_IP_COUNT 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_GROUP_COUNT 100</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> ips[MAX_IP_COUNT][<span class="number">12</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ips[i]);</span><br><span class="line">        <span class="type">int</span> sequence;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;sequence); <span class="comment">// 读取IP地址的序号，但不使用它</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> groups[MAX_GROUP_COUNT][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;groups[i][<span class="number">0</span>], &amp;groups[i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> ip1[<span class="number">16</span>], ip2[<span class="number">16</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>, ip1, ip2);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ip1_index = <span class="number">-1</span>, ip2_index = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(ip1, ips[j]) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ip1_index = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(ip2, ips[j]) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ip2_index = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> connected = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((groups[j][<span class="number">0</span>] == ip1_index + <span class="number">1</span> &amp;&amp; groups[j][<span class="number">1</span>] == ip2_index + <span class="number">1</span>) ||</span><br><span class="line">                (groups[j][<span class="number">0</span>] == ip2_index + <span class="number">1</span> &amp;&amp; groups[j][<span class="number">1</span>] == ip1_index + <span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                connected = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connected)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自己写的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m, n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> in_dex[<span class="number">50</span>][<span class="number">12</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,in_dex[i]);</span><br><span class="line"><span class="type">int</span> lins;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;lins);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> links[<span class="number">20</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;links[i][<span class="number">0</span>], &amp;links[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x; </span><br><span class="line"><span class="type">char</span> test_in[<span class="number">2</span>][<span class="number">12</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i= <span class="number">0</span>;i&lt;x;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>, test_in[<span class="number">0</span>], test_in[<span class="number">1</span>]);</span><br><span class="line"><span class="type">int</span> index1 = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span>index2 = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j= <span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(in_dex[j], test_in[<span class="number">0</span>]) == <span class="number">0</span>)</span><br><span class="line">index1 = j;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(in_dex[j], test_in[<span class="number">1</span>]) == <span class="number">0</span>)</span><br><span class="line">index2 = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((links[i][<span class="number">0</span>] == index1 + <span class="number">1</span> &amp;&amp; links[i][<span class="number">1</span>] == index2 + <span class="number">1</span>) ||</span><br><span class="line">(links[i][<span class="number">0</span>] == index2 + <span class="number">1</span> &amp;&amp; links[i][<span class="number">1</span>] == index1 + <span class="number">1</span>))</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag==<span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">10</span>:<span class="number">00</span></span><br><span class="line"><span class="number">10</span>:<span class="number">40</span></span><br><span class="line"><span class="number">11</span>:<span class="number">00</span></span><br><span class="line">    </span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="number">5</span></span><br><span class="line">    <span class="number">6</span> <span class="number">3</span></span><br><span class="line">    <span class="number">9</span> <span class="number">4</span></span><br><span class="line">    <span class="number">7</span> <span class="number">0</span></span><br><span class="line">    <span class="number">3</span> <span class="number">5</span></span><br><span class="line">    <span class="number">2</span> <span class="number">1</span></span><br><span class="line">    <span class="number">6</span></span><br><span class="line">    <span class="number">2</span> <span class="number">2</span></span><br><span class="line">    <span class="number">6</span> <span class="number">3</span></span><br><span class="line">    <span class="number">7</span> <span class="number">4</span></span><br><span class="line">    <span class="number">2</span> <span class="number">5</span></span><br><span class="line">    <span class="number">8</span> <span class="number">6</span></span><br><span class="line">    <span class="number">2</span> <span class="number">0</span></span><br><span class="line">    <span class="number">4</span></span><br><span class="line">    <span class="number">8</span> <span class="number">0</span></span><br><span class="line">    <span class="number">5</span> <span class="number">1</span></span><br><span class="line">    <span class="number">6</span> <span class="number">2</span></span><br><span class="line">    <span class="number">4</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m, n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> index[<span class="number">10</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;index[j][<span class="number">0</span>], &amp;index[j][<span class="number">1</span>]);</span><br><span class="line">num = num + j + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;n; j++)</span><br><span class="line">&#123;</span><br><span class="line">num = num - (index[j][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> result[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">result[i] = index[num<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">num = index[num<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n<span class="number">-1</span>; i &gt;=<span class="number">0</span> ; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, result[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>C语言实现字母重组功能</p><p>例 输入：</p><p>abc</p><p>输出 ：</p><p>abc</p><p>acb</p><p>bca</p><p>bac</p><p>cba</p><p>cab</p><h4 id="20-GCC的四个工作阶段"><a href="#20-GCC的四个工作阶段" class="headerlink" title="20.GCC的四个工作阶段"></a>20.GCC的四个工作阶段</h4><p>解释文档：<a href="https://blog.csdn.net/jb_home/article/details/113448528">https://blog.csdn.net/jb_home/article/details/113448528</a></p><ol><li>预处理（Pre-Processing）</li><li>编译（compiling）</li><li>汇编（Assembling）</li><li>链接（Linking）</li></ol><h4 id="21-判断素数和回文数"><a href="#21-判断素数和回文数" class="headerlink" title="21.判断素数和回文数"></a>21.判断素数和回文数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断一个数是否为素数的函数</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_prime</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 0和1都不是素数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//if (num &lt;= 3) &#123;</span></span><br><span class="line">    <span class="comment">//    return true; // 2和3是素数</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//if (num % 2 == 0 || num % 3 == 0) &#123;</span></span><br><span class="line">    <span class="comment">//    return false; // 能被2或3整除的数不是素数</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//for (int i = 5; i * i &lt;= num; i += 6) &#123;</span></span><br><span class="line">    <span class="comment">//    if (num % i == 0 || num % (i + 2) == 0) &#123;</span></span><br><span class="line">    <span class="comment">//        return false; // 能被i或(i+2)整除的数不是素数</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 其他情况下，数是素数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断一个数是否为回文数的函数</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_palindrome</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="type">int</span> original = num;</span><br><span class="line">    <span class="type">int</span> reverse = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> digit = num % <span class="number">10</span>;</span><br><span class="line">        reverse = reverse * <span class="number">10</span> + digit;</span><br><span class="line">        num /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> original == reverse; <span class="comment">// 如果原数与翻转后的数相等，说明是回文数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> M;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入大于100的整数M：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;M);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (M &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入的数必须大于100。\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 程序异常终止</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;100到%d之间的回文素数有：\n&quot;</span>, M);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num = <span class="number">101</span>; num &lt;= M; num++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_prime(num) &amp;&amp; is_palindrome(num)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, num); <span class="comment">// 输出回文素数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 程序正常终止</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="22-UART、IIC、SPI"><a href="#22-UART、IIC、SPI" class="headerlink" title="22.UART、IIC、SPI"></a>22.UART、IIC、SPI</h4><p>UART: 全双工通信，先发送低位，再发送高位</p><p>IIC: 半双工通信，先发送低位，再发送高位，最低的一位为通信方向(0代表主机发送数据，1代表主机接收数据)</p><p><img src="https://pic.imgdb.cn/item/64feeb33661c6c8e54833982.jpg"></p><p>SPI: 全双工通信，先发送高位，再发送低位</p><h4 id="23-C语言实现：假设有两个整形数组a和b，a是有序递增的，b是有序递减的。假设a中有足够的空间合并b，要求不使用额外的空间，把b合并到a后，需要去重新保证有序递增"><a href="#23-C语言实现：假设有两个整形数组a和b，a是有序递增的，b是有序递减的。假设a中有足够的空间合并b，要求不使用额外的空间，把b合并到a后，需要去重新保证有序递增" class="headerlink" title="23.C语言实现：假设有两个整形数组a和b，a是有序递增的，b是有序递减的。假设a中有足够的空间合并b，要求不使用额外的空间，把b合并到a后，需要去重新保证有序递增"></a>23.C语言实现：假设有两个整形数组a和b，a是有序递增的，b是有序递减的。假设a中有足够的空间合并b，要求不使用额外的空间，把b合并到a后，需要去重新保证有序递增</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="24-C语言实现：输入一个字符串，找出其中连续数字组成的最大数并返回。假定字符串只包含字母和数字，如果数字超过int表示的最大范围，就返回-1，如果没有找到数字，就返回0"><a href="#24-C语言实现：输入一个字符串，找出其中连续数字组成的最大数并返回。假定字符串只包含字母和数字，如果数字超过int表示的最大范围，就返回-1，如果没有找到数字，就返回0" class="headerlink" title="24.C语言实现：输入一个字符串，找出其中连续数字组成的最大数并返回。假定字符串只包含字母和数字，如果数字超过int表示的最大范围，就返回-1，如果没有找到数字，就返回0"></a>24.C语言实现：输入一个字符串，找出其中连续数字组成的最大数并返回。假定字符串只包含字母和数字，如果数字超过int表示的最大范围，就返回-1，如果没有找到数字，就返回0</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C</span><br></pre></td></tr></table></figure><h4 id="25-x-x3D-255，当x大于0时一直执行-x-x3D-x-amp-x-1-总共可以执行几次-8次"><a href="#25-x-x3D-255，当x大于0时一直执行-x-x3D-x-amp-x-1-总共可以执行几次-8次" class="headerlink" title="25.x&#x3D;255，当x大于0时一直执行  x&#x3D;x&amp;(x-1)总共可以执行几次  8次"></a>25.x&#x3D;255，当x大于0时一直执行  x&#x3D;x&amp;(x-1)总共可以执行几次  8次</h4><p>这个问题涉及到一个计算 x 的二进制表示中有多少个 1 的问题。具体来说，执行 <code>x = x &amp; (x - 1)</code> 操作将会消除 x 二进制表示中的最低位的 1。每次执行这个操作，都会减少 x 的二进制表示中的一个 1，因此我们可以通过多次执行这个操作来计算 x 二进制表示中有多少个 1，直到 x 变为 0 为止。</p><h4 id="26-static变量默认的初始化值是多少-0"><a href="#26-static变量默认的初始化值是多少-0" class="headerlink" title="26.static变量默认的初始化值是多少      0"></a>26.static变量默认的初始化值是多少      0</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> x; <span class="comment">// 默认初始化为0</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span>* ptr; <span class="comment">// 默认初始化为NULL(零地址)</span></span><br></pre></td></tr></table></figure><h4 id="27-void-可以转化为任何指针"><a href="#27-void-可以转化为任何指针" class="headerlink" title="27.void*可以转化为任何指针"></a>27.void*可以转化为任何指针</h4><p><code>void*</code>是C语言中的通用指针类型，它可以用来存储任何数据类型的地址。因此，你可以将<code>void*</code>转换为任何指针类型，但需要使用显式的类型转换。</p><h4 id="28-char是无符号类型？"><a href="#28-char是无符号类型？" class="headerlink" title="28.char是无符号类型？"></a>28.char是无符号类型？</h4><p><code>char</code> 类型在C语言中可以是有符号的，也可以是无符号的，具体取决于编译器和编译器选项。</p><p>通常情况下，你可以使用<code>signed char</code>来明确指定有符号<code>char</code>，或使用<code>unsigned char</code>来明确指定无符号<code>char</code>。</p><h4 id="29-运算符优先级"><a href="#29-运算符优先级" class="headerlink" title="29.运算符优先级"></a>29.运算符优先级</h4><p><a href="https://zhuanlan.zhihu.com/p/512384798">https://zhuanlan.zhihu.com/p/512384798</a></p><p><strong>！ &gt; 算术运算符 &gt; 关系运算符 &gt; &amp;&amp; &gt; || &gt; 赋值运算符</strong></p><p><img src="https://pic.imgdb.cn/item/65069aab661c6c8e544cd7bc.jpg"></p><h4 id="30-设已有说明语句“int-a-x3D-5则执行语句：-a-x3D-a-x3D-a-x3D-3的值为"><a href="#30-设已有说明语句“int-a-x3D-5则执行语句：-a-x3D-a-x3D-a-x3D-3的值为" class="headerlink" title="30.设已有说明语句“int a&#x3D;5则执行语句： a+-&#x3D;a*&#x3D;a%&#x3D;3的值为"></a>30.设已有说明语句“int a&#x3D;5则执行语句： a+-&#x3D;a*&#x3D;a%&#x3D;3的值为</h4><ol><li>首先，计算 <code>a *= a</code>，这相当于 <code>a = a * a</code>，因此 <code>a</code> 的值现在变为 <code>25</code>。</li><li>接下来，计算 <code>a %= 3</code>，这相当于 <code>a = a % 3</code>，因此 <code>a</code> 的值现在变为 <code>1</code>（<code>25</code> 除以 <code>3</code> 的余数）。</li><li>最后，计算 <code>a += -a</code>，这相当于 <code>a = a + (-a)</code>，这会将 <code>a</code> 的值置为 <code>1 - 1</code>，最终 <code>a</code> 的值仍然是 <code>0</code>。</li></ol><p>因此，执行语句 <code>a += -a *= a %= 3</code> 后，变量 <code>a</code> 的值为 <code>0</code>。</p><p>31.C语言实现：编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为“1”的个数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">countOnes</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 检查最低位是否为1</span></span><br><span class="line">        <span class="keyword">if</span> (num &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 右移一位，继续检查下一位</span></span><br><span class="line">        num &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个无符号整数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%u&quot;</span>, &amp;num);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> result = countOnes(num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二进制中数字位数为1的个数为：%d\n&quot;</span>, result);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="31-C语言实现：输入一个字符串，找出其中连续数字组成的最大数并返回。假定字符串只包含字母和数字，如果数字超过int表示的最大范围，就返回-1，如果没有找到数字，就返回0-例如：输入：ADD754ASD7851AD-输出：7851"><a href="#31-C语言实现：输入一个字符串，找出其中连续数字组成的最大数并返回。假定字符串只包含字母和数字，如果数字超过int表示的最大范围，就返回-1，如果没有找到数字，就返回0-例如：输入：ADD754ASD7851AD-输出：7851" class="headerlink" title="31.C语言实现：输入一个字符串，找出其中连续数字组成的最大数并返回。假定字符串只包含字母和数字，如果数字超过int表示的最大范围，就返回-1，如果没有找到数字，就返回0   例如：输入：ADD754ASD7851AD  输出：7851"></a>31.C语言实现：输入一个字符串，找出其中连续数字组成的最大数并返回。假定字符串只包含字母和数字，如果数字超过int表示的最大范围，就返回-1，如果没有找到数字，就返回0   例如：输入：ADD754ASD7851AD  输出：7851</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数，用于找出输入字符串中连续数字组成的最大数</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">findMaxNumber</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> maxNumber = <span class="number">0</span>;    <span class="comment">// 用于存储最大的连续数字</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> currentNumber = <span class="number">0</span>;    <span class="comment">// 用于临时存储当前连续数字</span></span><br><span class="line">    <span class="type">int</span> isNegative = <span class="number">0</span>;    <span class="comment">// 表示当前数字是否为负数</span></span><br><span class="line">    <span class="type">int</span> foundNumber = <span class="number">0</span>;    <span class="comment">// 表示是否找到了数字</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历输入字符串中的每个字符</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">        <span class="type">char</span> currentChar = str[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果当前字符是数字字符</span></span><br><span class="line">        <span class="keyword">if</span> (currentChar &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; currentChar &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            foundNumber = <span class="number">1</span>;    <span class="comment">// 表示找到了数字</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//// 处理负数情况</span></span><br><span class="line">            <span class="comment">//if (i &gt; 0 &amp;&amp; str[i - 1] == &#x27;-&#x27;) &#123;</span></span><br><span class="line">            <span class="comment">//    isNegative = 1;</span></span><br><span class="line">            <span class="comment">//    continue;</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">            currentNumber = currentNumber * <span class="number">10</span> + (currentChar - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检查是否发生整数溢出</span></span><br><span class="line">            <span class="keyword">if</span> (currentNumber &gt; LLONG_MAX) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;    <span class="comment">// 返回-1表示数字超过了long long类型的最大范围</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果遇到非数字字符，重置当前数字</span></span><br><span class="line">            <span class="keyword">if</span> (foundNumber) &#123;</span><br><span class="line">             <span class="comment">/*   if (isNegative) &#123;</span></span><br><span class="line"><span class="comment">                    currentNumber = -currentNumber;</span></span><br><span class="line"><span class="comment">                    isNegative = 0;</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line">                <span class="keyword">if</span> (currentNumber &gt; maxNumber) &#123;</span><br><span class="line">                    maxNumber = currentNumber;</span><br><span class="line">                &#125;</span><br><span class="line">                currentNumber = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理最后一个数字</span></span><br><span class="line">    <span class="keyword">if</span> (foundNumber) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isNegative) &#123;</span><br><span class="line">            currentNumber = -currentNumber;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (currentNumber &gt; maxNumber) &#123;</span><br><span class="line">            maxNumber = currentNumber;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> foundNumber ? maxNumber : <span class="number">0</span>;    <span class="comment">// 返回找到的最大连续数字，如果没有找到数字返回0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> input[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> result = findMaxNumber(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;数字超过long long类型的最大范围，返回-1\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没有找到数字，返回0\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;连续数字组成的最大数为：%lld\n&quot;</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="32-中断向量表中保存的是中断处理程序的入口地址"><a href="#32-中断向量表中保存的是中断处理程序的入口地址" class="headerlink" title="32. 中断向量表中保存的是中断处理程序的入口地址"></a>32. 中断向量表中保存的是中断处理程序的入口地址</h4><p><img src="https://pic.imgdb.cn/item/65118239c458853aef5350ee.jpg"></p><h4 id="33-C语言实现求解两个整数的最大公约数"><a href="#33-C语言实现求解两个整数的最大公约数" class="headerlink" title="33.C语言实现求解两个整数的最大公约数"></a>33.C语言实现求解两个整数的最大公约数</h4><p>使用欧几里得算法（也称为辗转相除法）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明，用于计算两个整数的最大公约数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> num1, num2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入两个整数：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;num1, &amp;num2);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = gcd(num1, num2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大公约数是：%d\n&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义，计算两个整数的最大公约数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        temp = b;</span><br><span class="line">        b = a % b;</span><br><span class="line">        a = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="34-链表插入操作时，通常使用二级指针而不是一级指针的原因？"><a href="#34-链表插入操作时，通常使用二级指针而不是一级指针的原因？" class="headerlink" title="34.链表插入操作时，通常使用二级指针而不是一级指针的原因？"></a>34.链表插入操作时，通常使用二级指针而不是一级指针的原因？</h4><p>你有一个链表，并且要实现一个函数来在链表的头部插入一个新的节点。如果你只传递指向链表头部的指针（一级指针），那么在函数内部插入新节点后，<em><strong>链表的头部指针不会在函数外部发生变化</strong></em>，<em><strong>因为C语言中函数参数传递是按值传递的，传递的是参数的拷贝</strong></em>。</p><p>但是，如果你传递指向指针的指针（二级指针），函数内部可以修改指针的值，使它指向新插入的节点。<em><strong>这会反映在函数外部</strong></em>，从而使链表的头部指针指向新插入的节点。</p><h4 id="35-检测链表是否存在环"><a href="#35-检测链表是否存在环" class="headerlink" title="35.检测链表是否存在环"></a>35.检测链表是否存在环</h4><p>要在C语言中检测一个链表是否存在环，你可以使用快慢指针算法（Floyd’s Tortoise and Hare Algorithm）。这个算法使用两个指针，一个<strong>慢指针</strong>（龟）每次移动一个节点，一个<strong>快指针</strong>（兔）每次移动两个节点。如果链表中存在环，那么快指针最终会追上慢指针。如果链表没有环，快指针将会到达链表的末尾。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测链表是否存在环</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">hasCycle</span><span class="params">(<span class="keyword">struct</span> Node* head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 链表为空或只有一个节点，一定没有环</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">slow</span> =</span> head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">fast</span> =</span> head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        slow = slow-&gt;next; <span class="comment">// 慢指针每次移动一个节点</span></span><br><span class="line">        fast = fast-&gt;next-&gt;next; <span class="comment">// 快指针每次移动两个节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 快慢指针相遇，存在环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 遍历完整个链表没有相遇，不存在环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">head</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">second</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">third</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    head = (<span class="keyword">struct</span> Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    second = (<span class="keyword">struct</span> Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    third = (<span class="keyword">struct</span> Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line"></span><br><span class="line">    head-&gt;data = <span class="number">1</span>;</span><br><span class="line">    head-&gt;next = second;</span><br><span class="line"></span><br><span class="line">    second-&gt;data = <span class="number">2</span>;</span><br><span class="line">    second-&gt;next = third;</span><br><span class="line"></span><br><span class="line">    third-&gt;data = <span class="number">3</span>;</span><br><span class="line">    third-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个环</span></span><br><span class="line">    third-&gt;next = head;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> hasCycleResult = hasCycle(head);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hasCycleResult) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;链表存在环\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;链表不存在环\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="36-函数指针的用法"><a href="#36-函数指针的用法" class="headerlink" title="36.函数指针的用法"></a>36.函数指针的用法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">在C语言中，你可以定义一个指针，该指针指向一个函数，这个函数被称作函数指针。下面是如何定义一个指向函数的指针的示例：</span><br><span class="line"><span class="comment">// 先定义一个函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_function</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 然后定义一个指向这个函数的指针</span></span><br><span class="line"><span class="type">int</span> (*my_function_ptr)(<span class="type">int</span>, <span class="type">int</span>);</span><br><span class="line"><span class="comment">// 初始化上面的函数指针</span></span><br><span class="line">my_function_ptr = &amp;my_function;</span><br><span class="line"><span class="comment">/**********************************************************************************************************/</span></span><br><span class="line">在这个例子中，my_function_ptr是一个指向函数的指针，该函数接受两个<span class="type">int</span>类型的参数并返回一个<span class="type">int</span>类型的结果。我们通过&amp;my_function获取my_function的地址，并将这个地址赋值给my_function_ptr。</span><br><span class="line">然后，你可以通过这个函数指针来调用函数：</span><br><span class="line"><span class="type">int</span> result = my_function_ptr(<span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 这将调用 my_function，并返回结果 7</span></span><br><span class="line">这样，你就可以创建一个指向特定函数的指针，并在运行时决定调用哪个函数。</span><br></pre></td></tr></table></figure><h4 id="37-二位数组和指针的用法"><a href="#37-二位数组和指针的用法" class="headerlink" title="37.二位数组和指针的用法"></a>37.二位数组和指针的用法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[][<span class="number">3</span>] = &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr = a[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(ptr+<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***运行结果***/</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[][<span class="number">3</span>] = &#123; &#123;<span class="number">9</span>&#125;, &#123;<span class="number">6</span>,<span class="number">5</span>&#125;, &#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125; &#125;;</span><br><span class="line"><span class="type">int</span>* ptr = a[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(ptr+<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***运行结果***/</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-不同的数据类型所占的字节数&quot;&gt;&lt;a href=&quot;#1-不同的数据类型所占的字节数&quot; class=&quot;headerlink&quot; title=&quot;1.不同的数据类型所占的字节数&quot;&gt;&lt;/a&gt;1.不同的数据类型所占的字节数&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;16位编译器&lt;br&gt;cha</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C语言关键字</title>
    <link href="https://jiangqqpan.github.io/2023/06/01/C%E8%AF%AD%E8%A8%80%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://jiangqqpan.github.io/2023/06/01/C%E8%AF%AD%E8%A8%80%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2023-06-01T11:33:02.000Z</published>
    <updated>2023-10-15T08:17:51.126Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-extern"><a href="#1-extern" class="headerlink" title="1.extern"></a>1.extern</h4><p>extern用来声明变量或者函数的，extern声明不是定义，也不分配存储空间。</p><p>在一个文件中定义了变量和函数，想要在其他文件中使用它们，可以有两种方式:</p><ul><li>先声明它们，然后引用头文件，其他文件再去包含头文件;</li><li>在其他文件中直接extern。</li></ul><h4 id="2-static"><a href="#2-static" class="headerlink" title="2.static"></a>2.static</h4><h5 id="2-1static-修饰局部变量"><a href="#2-1static-修饰局部变量" class="headerlink" title="2.1static(修饰局部变量)"></a>2.1static(修饰局部变量)</h5><p>静态局部变量使用static修饰符定义static修饰局部变量可以把它初始化为0</p><p>且静态局部变量存储于进程的全局数据区，即使函数返回，它的值也会保持不变。</p><h5 id="2-2static-修饰全局变量"><a href="#2-2static-修饰全局变量" class="headerlink" title="2.2static(修饰全局变量)"></a>2.2static(修饰全局变量)</h5><p>静态全局变量仅当前文件可见，<em><strong>其他文件不可访问</strong></em>，其他文件可以定义与其同名的变量,</p><p>两者互不影响定义在函数体外部，在全局数据区分配存储空间，编译器会自动对其初始化</p><h5 id="2-3static-修饰函数量"><a href="#2-3static-修饰函数量" class="headerlink" title="2.3static(修饰函数量)"></a>2.3static(修饰函数量)</h5><p>静态全局变量仅当前文件可见，<em><strong>其他文件不可访问</strong></em>，不同的文件可以使用相同名字的静态函数，互不影响</p><h4 id="3-const常量和-define的区别"><a href="#3-const常量和-define的区别" class="headerlink" title="3.const常量和#define的区别"></a>3.const常量和#define的区别</h4><p>区别1:</p><p>执行程序:</p><p>define是在编译的预处理阶段起作用，而const是在编译、运行的时候起作用。</p><p>区别2:<br>对程序的作用:<br>define只是简单的字符串替换，没有类型检查。<br>而const有对应的数据类型，是要进行判断的，可以避免一些低级的错误。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> n = <span class="number">10</span>; <span class="type">const</span>修饰变量n后，保护了变量n,使其不能被赋值修改。 <span class="type">const</span>.c</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p = &amp;n;n里面的值不能被改变<span class="comment">//*p= 20;//会报错const1.c</span></span><br><span class="line">    </span><br><span class="line"><span class="type">const</span> <span class="type">int</span>*p= &amp;n;n里面的值不能被改变<span class="comment">//*p= 20;1/会报错const1.c</span></span><br><span class="line"><span class="type">const</span>放在*的左边，修饰的是指针指向的内容，保证指针指向的内容不能通过指针来改变。</span><br><span class="line"><span class="type">const</span>修饰过的指针变量p不能修改a中的内容，而没有用<span class="type">const</span>修饰过的指针变量q照样可以修改a中的内容，而且a自己也可以重新给自己赋值。</span><br><span class="line"></span><br><span class="line"><span class="type">const</span>放在*的右边，修饰的是指针变量本身，保证了指针变量的内容不能修改。</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p = &amp;n;  指向n的行为不能被改变<span class="comment">//p = &amp;m;//会报错</span></span><br><span class="line"><span class="type">int</span> <span class="type">const</span> *p????????????????</span><br></pre></td></tr></table></figure><h4 id="4-typedef"><a href="#4-typedef" class="headerlink" title="4.typedef"></a>4.typedef</h4><p>第一种理解:将变量重新定义新名字</p><p>系统默认的所有基本类型都可以利用typedef 关键字来重新定义类型名</p><p>第二种理解:将结构体重新定义新名字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">用以下结构体为例，定义一个名为student的结构体:</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">age x;</span><br><span class="line">    number y;</span><br><span class="line">&#125;;</span><br><span class="line">调用这个结构体时，以须这样来调用这个结构体</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">ming</span>=</span>&#123;<span class="number">20</span>，<span class="number">100</span>&#125;;<span class="comment">// struct student hong;</span></span><br><span class="line"></span><br><span class="line">起个别名</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">name</span>;</span></span><br><span class="line">name ming=&#123;<span class="number">20</span>，<span class="number">100</span>&#125;;<span class="comment">// name hong;程序验证</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-extern&quot;&gt;&lt;a href=&quot;#1-extern&quot; class=&quot;headerlink&quot; title=&quot;1.extern&quot;&gt;&lt;/a&gt;1.extern&lt;/h4&gt;&lt;p&gt;extern用来声明变量或者函数的，extern声明不是定义，也不分配存储空间。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>FreeRTOS</title>
    <link href="https://jiangqqpan.github.io/2023/04/27/FreeRTOS/"/>
    <id>https://jiangqqpan.github.io/2023/04/27/FreeRTOS/</id>
    <published>2023-04-27T11:28:05.000Z</published>
    <updated>2023-10-15T08:18:16.165Z</updated>
    
    <content type="html"><![CDATA[<p>1.在freertos的任务中使用HAL_Delay()函数，不会使任务进入阻塞状态，而是任务一直在运行，这会导致CPU负荷的增加，降低任务调度的及时性。</p><p>所以，在实际应用的具体实现方案两种：</p><p>第一种：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AppTask_LED1</span><span class="params">(<span class="type">void</span> *argument)</span></span><br><span class="line">&#123;</span><br><span class="line">TickType_t ticks1=pdMS_TO_TICKS(<span class="number">1000</span>);<span class="comment">//时间(ms)转换为节拍数(ticks)</span></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN AppTask_LED1 */</span></span><br><span class="line">  <span class="comment">/* Infinite loop */</span></span><br><span class="line">  <span class="keyword">for</span>(;;)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">  vTaskDelay(ticks1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END AppTask_LED1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用vTaskDelay()函数来实现延时的功能，它可以让任务进入阻塞状态，让出CPU的使用权。</p><p>缺点：时间存在微小误差</p><p><img src="https://pic2.imgdb.cn/item/644a5f400d2dde5777cf4a98.jpg"></p><p>第二种：</p><p>执行时通过vTaskDelayUntil()函数获取滴答信号的当前计数值，作为previousWakeTime的初值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AppTask_LED1</span><span class="params">(<span class="type">void</span> *argument)</span></span><br><span class="line">&#123;</span><br><span class="line">TickType_t ticks1=pdMS_TO_TICKS(<span class="number">1000</span>);<span class="comment">//时间(ms)转换为节拍数(ticks)</span></span><br><span class="line">TickType_t previousWakeTime=xTaskGetTickCount();<span class="comment">//获取滴答信号的当前计数值</span></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN AppTask_LED1 */</span></span><br><span class="line">  <span class="comment">/* Infinite loop */</span></span><br><span class="line">  <span class="keyword">for</span>(;;)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line"><span class="comment">//  vTaskDelay(ticks1);</span></span><br><span class="line">  vTaskDelayUntil(&amp;previousWakeTime, ticks1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END AppTask_LED1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vTaskDelayUntil(&amp;previousWakeTime, ticks1);表示从previousWakeTime值开始延时ticks1个节拍，函数内会自动更新previousWakeTime的值，也会自动处理滴答信号计数值溢出的情况。</p><p><img src="https://pic2.imgdb.cn/item/644a5f7f0d2dde5777cfa9b4.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.在freertos的任务中使用HAL_Delay()函数，不会使任务进入阻塞状态，而是任务一直在运行，这会导致CPU负荷的增加，降低任务调度的及时性。&lt;/p&gt;
&lt;p&gt;所以，在实际应用的具体实现方案两种：&lt;/p&gt;
&lt;p&gt;第一种：&lt;/p&gt;
&lt;figure class=&quot;hi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C语言进制输出表示</title>
    <link href="https://jiangqqpan.github.io/2023/01/03/C%E8%AF%AD%E8%A8%80%E8%BF%9B%E5%88%B6%E8%BE%93%E5%87%BA%E8%A1%A8%E7%A4%BA/"/>
    <id>https://jiangqqpan.github.io/2023/01/03/C%E8%AF%AD%E8%A8%80%E8%BF%9B%E5%88%B6%E8%BE%93%E5%87%BA%E8%A1%A8%E7%A4%BA/</id>
    <published>2023-01-03T09:27:55.000Z</published>
    <updated>2023-10-15T08:17:58.115Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">%d 有符号<span class="number">10</span>进制整数</span><br><span class="line">%i 有符号<span class="number">10</span>进制整数</span><br><span class="line">%o 无符号<span class="number">8</span>进制整数</span><br><span class="line">%u 无符号<span class="number">10</span>进制整数</span><br><span class="line">%x 无符号的<span class="number">16</span>进制数字，并以小写abcdef表示</span><br><span class="line">%X 无符号的<span class="number">16</span>进制数字，并以大写ABCDEF表示</span><br><span class="line">%F/f 浮点数</span><br><span class="line">%E/e 用科学表示格式的浮点数</span><br><span class="line">%g 使用%f和%e表示中的总的位数表示最短的来表示浮点数 G 同g格式，但表示为指数</span><br><span class="line">%c 单个字符</span><br><span class="line">%s 字符串</span><br></pre></td></tr></table></figure><p>标题整型有无符号（unsigned）和有符号（signed）两种类型，在默认情况下声明的整型变量都是有符号的类型（char有点特别），如果需声明无符号类型的话就需要在类型前加上unsigned。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>STM32外设工作原理(基于HAL库)</title>
    <link href="https://jiangqqpan.github.io/2023/01/02/STM32%E5%A4%96%E8%AE%BE%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-%E5%9F%BA%E4%BA%8EHAL%E5%BA%93/"/>
    <id>https://jiangqqpan.github.io/2023/01/02/STM32%E5%A4%96%E8%AE%BE%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-%E5%9F%BA%E4%BA%8EHAL%E5%BA%93/</id>
    <published>2023-01-02T04:21:20.000Z</published>
    <updated>2023-10-15T08:19:04.815Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-通用定时器生成PWM波"><a href="#1-通用定时器生成PWM波" class="headerlink" title="1. 通用定时器生成PWM波"></a><strong>1. 通用定时器生成PWM波</strong></h3><h4 id="1-1-功能概述"><a href="#1-1-功能概述" class="headerlink" title="1.1 功能概述"></a>1.1 功能概述</h4><p><strong>通用定时器TIM2-TIM5，TIM9-TIM14，计数器位数，通道数不同</strong></p><p><a href="https://pic.imgdb.cn/item/63b25fc35d94efb26fbc4a9f.jpg"><img src="https://pic.imgdb.cn/item/63b25fc35d94efb26fbc4a9f.jpg"></a></p><h4 id="1-2-生成PWM波的原理"><a href="#1-2-生成PWM波的原理" class="headerlink" title="1.2 生成PWM波的原理"></a>1.2 生成PWM波的原理</h4><p>PWM（Pulse Width Modulation）就是脉冲宽度调制，PWM波就是具有一定占空比的方波信号，通过定时器的设置可以控制方波的频率和占空比。</p><p><a href="https://pic.imgdb.cn/item/63b260525d94efb26fbce793.jpg"><img src="https://pic.imgdb.cn/item/63b260525d94efb26fbce793.jpg"></a></p><h4 id="1-3-与生成PWM波相关的HAL函数"><a href="#1-3-与生成PWM波相关的HAL函数" class="headerlink" title="1.3 与生成PWM波相关的HAL函数"></a>1.3 与生成PWM波相关的HAL函数</h4><p><a href="https://pic.imgdb.cn/item/63b261575d94efb26fbe1c8f.jpg"><img src="https://pic.imgdb.cn/item/63b261575d94efb26fbe1c8f.jpg"></a></p><h4 id="1-4-STM32CUBEMX配置-固定频率PWM"><a href="#1-4-STM32CUBEMX配置-固定频率PWM" class="headerlink" title="1.4 STM32CUBEMX配置(固定频率PWM)"></a>1.4 STM32CUBEMX配置(固定频率PWM)</h4><p>对于STM32F407ZGT6的TIM14的CH1可以对应引脚到PF9(LED0)，用来控制灯的亮度</p><p>定时器TIM14各选项的意义：</p><ul><li><input disabled="" type="checkbox"> Disable ,禁用通道</li><li><input disabled="" type="checkbox"> Input Capture Direct Mode,直接模式输入捕获</li><li><input disabled="" type="checkbox"> Output Compare No Output,输出比较，不输出到通道引脚</li><li><input disabled="" type="checkbox"> Output Compare CH1,输出比较，输出到通道引脚CH1</li><li><input disabled="" type="checkbox"> PWM Generation No Output,生成PWM，不输出到通道引脚</li><li><input disabled="" type="checkbox"> PWM Generation CH1,生成PWM，输出到通道引脚CH1</li><li><input disabled="" type="checkbox"> Forced Output CH1,强制通道引脚CH1输出某个电平</li></ul><p>PWM模式，选项有PWM Mode 1和PWM Mode 2</p><p>PWM Mode 1-&gt;递增计数模式：CNT&lt;CCR(有效状态)，CNT&gt;CCR(无效状态)</p><p>PWM Mode 2-&gt;递减计数模式：CNT&lt;CCR(无效状态)，CNT&gt;CCR(有效状态)</p><p>Pulse，PWM脉冲宽度，就是设置16位的捕获&#x2F;比较寄存器CCR的值。脉冲宽度的值应该小于计数周期的值</p><p>eg：设置为50，因为计数器的时钟频率是10kHz（对应定时器APB的值，经过Prescaler分频之后的时钟频率（进入计数器的时钟频率）），所以脉冲宽度为5ms</p><p><strong>Output compare preload，输出比较预装载。若Enable，修改CCR值(修改占空比)后立即生效；若Disable，修改CCR之后要等到下一个UEVA事件才会生效。</strong></p><p>Fast Mode，是否使用输出比较快速使能</p><blockquote><p><em><strong>CH Polarity，通道极性，就是CCR与CNT比较输出的有效状态,可以设置为高电平(High）或低电平（(Low)</strong></em></p><p>主程序（固定频率PWM）：</p><p>必须调用函数启动定时器，再启动定时器的PWM输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HAL_TIM_Base_Start_IT(&amp;htim14); <span class="comment">//以中断方式启动TIM14</span></span><br><span class="line">HAL_TIM_PWM_Start_IT(&amp;htim14,TIM_CHANNEL_1);</span><br><span class="line"><span class="comment">//TIM14通道1, 启动生成PWM</span></span><br></pre></td></tr></table></figure><p>主程序（可变频率PWM）：</p><p>重新实现回调函数HAL_TIM_PWM_PulseFinishedCallback()，在此回调函数里编写代码改变占空比。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> pulseWidth=<span class="number">50</span>;<span class="comment">//脉宽</span></span><br><span class="line"><span class="type">uint8_t</span> dirInc=<span class="number">1</span>;<span class="comment">//脉宽变化方向,1=递增,0=递减</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PWM_PulseFinishedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(htim-&gt;Instance != TIM14)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(dirInc==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">pulseWidth++;</span><br><span class="line"><span class="keyword">if</span>(pulseWidth&gt;=<span class="number">195</span>)</span><br><span class="line">&#123;</span><br><span class="line">pulseWidth = <span class="number">195</span>;</span><br><span class="line">dirInc = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pulseWidth--;</span><br><span class="line"><span class="keyword">if</span>(pulseWidth&lt;=<span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">pulseWidth = <span class="number">5</span>;</span><br><span class="line">dirInc=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">__HAL_TIM_SET_COMPARE(&amp;htim14,TIM_CHANNEL_1,pulseWidth);<span class="comment">//设置CCR的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="2-输入PWM"><a href="#2-输入PWM" class="headerlink" title="2. 输入PWM"></a>2. 输入PWM</h3><p>一个定时器产生PWM波，另一个定时器测量这个PWM波，本次采用TIM14的CH1通道(即PF9)来产生PWM波TIM9_CH1测量pwm波。</p><h4 id="2-1-cubemx的配置"><a href="#2-1-cubemx的配置" class="headerlink" title="2.1 cubemx的配置"></a>2.1 cubemx的配置</h4><p><strong>使用定时器TIM9的PWM输入功能测量PWM波参数。TIM9有2个通道，在输入PWM模式下，使两个通道都映射到TIM9_CH1的复用引脚上。</strong></p><p><a href="https://pic.imgdb.cn/item/63b3b2d0be43e0d30e845eda.jpg"><img src="https://pic.imgdb.cn/item/63b3b2d0be43e0d30e845eda.jpg"></a></p><p><a href="https://pic.imgdb.cn/item/63b3b5ffbe43e0d30e898b35.jpg"><img src="https://pic.imgdb.cn/item/63b3b5ffbe43e0d30e898b35.jpg"></a></p><p>由于需要在TIM9的捕获比较中断里读取CCR的值，因此打开TIM9的中断。</p><h3 id="3-基于HAL库的按键检测代码"><a href="#3-基于HAL库的按键检测代码" class="headerlink" title="3.基于HAL库的按键检测代码"></a>3.基于HAL库的按键检测代码</h3><p><a href="https://wwqe.lanzouo.com/iuE7i0kvztyf">https://wwqe.lanzouo.com/iuE7i0kvztyf</a></p><h3 id="4-CUBEMX配置LCD屏幕"><a href="#4-CUBEMX配置LCD屏幕" class="headerlink" title="4.CUBEMX配置LCD屏幕"></a>4.CUBEMX配置LCD屏幕</h3><p><a href="https://pic.imgdb.cn/item/63c25040be43e0d30ef39094.jpg"><img src="https://pic.imgdb.cn/item/63c25040be43e0d30ef39094.jpg"></a></p><p>检查FSMC自动分配的GPIO引脚是否与电路图一致，若不一致直接修改即可。</p><p>设置背光对应的IO</p><p><a href="https://pic.imgdb.cn/item/63c27833be43e0d30e3a8e8c.jpg"><img src="https://pic.imgdb.cn/item/63c27833be43e0d30e3a8e8c.jpg"></a></p><p><a href="https://pic.imgdb.cn/item/63c2609cbe43e0d30e114e3a.jpg"><img src="https://pic.imgdb.cn/item/63c2609cbe43e0d30e114e3a.jpg"></a></p><h3 id="5-基于HAL库改版正点原子TFTLCD驱动程序（HAL）"><a href="#5-基于HAL库改版正点原子TFTLCD驱动程序（HAL）" class="headerlink" title="5.基于HAL库改版正点原子TFTLCD驱动程序（HAL）"></a>5.基于HAL库改版正点原子TFTLCD驱动程序（HAL）</h3><p>基于型号9413，stm32f407zgt6</p><p><a href="https://wwqe.lanzouo.com/igS5X0nv67cf">https://wwqe.lanzouo.com/igS5X0nv67cf</a></p><h3 id="6-基于HAL库改版正点原子HAL库TFTLCD驱动程序（最新版V3）"><a href="#6-基于HAL库改版正点原子HAL库TFTLCD驱动程序（最新版V3）" class="headerlink" title="6.基于HAL库改版正点原子HAL库TFTLCD驱动程序（最新版V3）"></a>6.基于HAL库改版正点原子HAL库TFTLCD驱动程序（最新版V3）</h3><p>改良版程序</p><p><a href="https://wwqe.lanzouo.com/i3nHP0nvqm8b">https://wwqe.lanzouo.com/i3nHP0nvqm8b</a></p><p>基于CUBEIDE的LCD实现程序：</p><p><a href="https://wwqe.lanzouo.com/ipmAU0qm5dob">https://wwqe.lanzouo.com/ipmAU0qm5dob</a></p><h4 id="6-1-重点"><a href="#6-1-重点" class="headerlink" title="6.1 重点"></a>6.1 重点</h4><p>在最新版的TFTLCD驱动程序中，需要把lcd_ex.c文件在MDK中设置为<em><strong>永不编译</strong></em>的情况</p><p>具体说明连接：<a href="https://blog.csdn.net/qq_25144391/article/details/118959208">https://blog.csdn.net/qq_25144391/article/details/118959208</a></p><p><a href="https://pic.imgdb.cn/item/63ef68d8f144a01007c6b95a.jpg"><img src="https://pic.imgdb.cn/item/63ef68d8f144a01007c6b95a.jpg"></a></p><p>在CUBEIDE的配置中：</p><p><a href="https://pic.imgdb.cn/item/64183492a682492fcc11f912.jpg"><img src="https://pic.imgdb.cn/item/64183492a682492fcc11f912.jpg"></a></p><h3 id="7-实时时钟RTC"><a href="#7-实时时钟RTC" class="headerlink" title="7.实时时钟RTC"></a>7.实时时钟RTC</h3><p>工程连接<a href="https://wwqe.lanzouo.com/iy3Ac0nyb2de">https://wwqe.lanzouo.com/iy3Ac0nyb2de</a></p><p>RTC（Real-time Clock，实时时钟）是由时钟信号驱动的日历时钟，提供日期和时间数据。</p><ul><li><input disabled="" type="checkbox"> RTC能提供BCD或二进制的秒、分钟、小时（12或24小时制）、星期几、日期、月份、年份数据</li><li><input disabled="" type="checkbox"> RTC模块和时钟配置都使用备用存储区域，使用VBAT备用电源，即使主电源断电或系统复位也不影响RTC的工作</li><li><input disabled="" type="checkbox"> RTC有两个可编程闹钟中断，可以设定任意组合和重复性的闹钟</li><li><input disabled="" type="checkbox"> 有一个可周期性唤醒的中断，唤醒中断可以当做一个普通定时器使用</li><li><input disabled="" type="checkbox"> 具有时间戳和入侵检测功能</li></ul><p><a href="https://jiangqqpan.github.io/file/RTC.pdf"><strong>RTC文档链接</strong></a></p><h3 id="8-串口USART"><a href="#8-串口USART" class="headerlink" title="8.串口USART"></a>8.串口USART</h3><p>工程连接：<a href="https://wwqe.lanzouo.com/iOpDW0o4r0ri">https://wwqe.lanzouo.com/iOpDW0o4r0ri</a></p><p><a href="https://pic.imgdb.cn/item/63f36902f144a01007ccb145.jpg"><img src="https://pic.imgdb.cn/item/63f36902f144a01007ccb145.jpg"></a></p><h4 id="8-1常用宏函数"><a href="#8-1常用宏函数" class="headerlink" title="8.1常用宏函数"></a>8.1常用宏函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__HAL_UART_ENABLE(__HANDLE__)，使能一个UART口，如</span><br><span class="line">__HAL_UART_ENABLE(&amp;huart1);</span><br><span class="line"></span><br><span class="line">__HAL_UART_ENABLE_IT(__HANDLE__, __INTERRUPT__)，使能某</span><br><span class="line">个中断事件源，如</span><br><span class="line">__HAL_UART_ENABLE_IT(&amp;huart1, UART_IT_RXNE); <span class="comment">//使能接收中断</span></span><br><span class="line">__HAL_UART_ENABLE_IT(&amp;huart1, UART_IT_IDLE); <span class="comment">//使能空闲中断</span></span><br><span class="line"></span><br><span class="line"> __HAL_UART_DISABLE_IT(__HANDLE__, __INTERRUPT__)，禁止</span><br><span class="line">某个中断事件源</span><br><span class="line">     </span><br><span class="line">__HAL_UART_GET_FLAG(__HANDLE__, __FLAG__)，检查一个串口的某个中断标志是否被置位，返回值为宏定义常量SET或</span><br><span class="line">RESET。中断事件标志的宏定义如下：</span><br><span class="line">UART_FLAG_CTS: CTS 信号变化标志</span><br><span class="line">UART_FLAG_LBD: LIN 打断检测标志</span><br><span class="line">UART_FLAG_TXE: 发送数据寄存器空标志</span><br><span class="line">UART_FLAG_TC: 发送完成标志</span><br><span class="line">UART_FLAG_RXNE: 接收数据寄存器非空标志</span><br><span class="line">UART_FLAG_IDLE: 线路空闲标志</span><br><span class="line">UART_FLAG_ORE: 出错误标志</span><br><span class="line">UART_FLAG_NE: 声错误标志</span><br><span class="line">UART_FLAG_FE: 帧错误标志</span><br><span class="line">UART_FLAG_PE: 奇偶校验错误标志</span><br><span class="line">    </span><br><span class="line">__HAL_UART_CLEAR_FLAG(__HANDLE__, __FLAG__)，清除一个UART口的某个事件标志位</span><br></pre></td></tr></table></figure><p><em><strong>注意</strong></em>：注意，HAL_UART_Receive_IT()完成一次数据接收后就关闭了串口接收中断，不会自动进行下一次的接收，需要再次调用HAL_UART_Receive_IT()以启动下一次的接收，但不能在回调函数HAL_UART_RxCpltCallback()里调用HAL_UART_Receive_IT()。</p><p>为了能连续进行中断方式的串口接收，程序的处理方法是：在完成一次接收，并且串口状态为空闲，也就是发生UART_IT_IDLE中断时，对接收到的指令数据进行处理，然后再次调用HAL_UART_Receive_IT()以启动下一次的接收。</p><p><a href="https://jiangqqpan.github.io/file/USART.pdf"><strong>USART文档链接</strong></a></p><h3 id="9-ADC"><a href="#9-ADC" class="headerlink" title="9.ADC"></a>9.ADC</h3><ul><li>ADC转换电压的输入范围范围是VREF-≤VIN≤VREF+，由于VREF-必须与VSSA连接，也就是VREF-总是0，所以STM32F407的片上ADC只能转换正电压。</li><li>选择的多个模拟输入通道可以分为两组：规则通道和注入通道，每个组的通道构成一个转换序列。<ul><li><input disabled="" type="checkbox"> 规则转换序列最多可设置16个通道，一个规则转换序列规定了多路复用转换时的顺序。</li><li><input disabled="" type="checkbox"> 注入通道就是可以在规则通道转换过程中插入进行转换的通道，类似于中断的现象。每个注入通道还可以设置一个数据偏移量，每次转换结果自动减去这个偏移量，所以转换结果可以是负数。</li></ul></li></ul><p> ADC时钟与转换时间：ADCCLK最高42MHz。一个通道一次ADC转换的总时间是N+12个ADCCLK周期，N是设置的采样次数。</p><p><a href="https://pic.imgdb.cn/item/640b1ab7f144a010071312a0.jpg"><img src="https://pic.imgdb.cn/item/640b1ab7f144a010071312a0.jpg"></a></p><p><img src="C:\Users\HP\AppData\Roaming\Typora\typora-user-images\image-20230310195613923.png" alt="image-20230310195613923"></p><p><a href="https://pic.imgdb.cn/item/640b1afbf144a0100713814b.jpg"><img src="https://pic.imgdb.cn/item/640b1afbf144a0100713814b.jpg"></a></p><h4 id="9-1软件启动ADC转换"><a href="#9-1软件启动ADC转换" class="headerlink" title="9.1软件启动ADC转换"></a>9.1软件启动ADC转换</h4><p>工程链接：<a href="https://wwqe.lanzouo.com/izvuZ0qapo8j">https://wwqe.lanzouo.com/izvuZ0qapo8j</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_ADC_Start</span><span class="params">(ADC_HandleTypeDef* hadc)</span>; </span><br><span class="line"><span class="comment">//软件启动转换</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_ADC_Stop</span><span class="params">(ADC_HandleTypeDef* hadc)</span>; </span><br><span class="line"><span class="comment">//停止转换</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_ADC_PollForConversion</span><span class="params">(ADC_HandleTypeDef* </span></span><br><span class="line"><span class="params">hadc, <span class="type">uint32_t</span> Timeout)</span>;</span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">HAL_ADC_GetValue</span><span class="params">(ADC_HandleTypeDef* hadc)</span>; </span><br><span class="line"><span class="comment">//读取转换结果寄存器的32位数据</span></span><br></pre></td></tr></table></figure><p>其中，参数hadc是ADC外设对象指针，Timeout是超时等待时间，单位是节拍数。</p><p><a href="https://pic.imgdb.cn/item/640b1bc4f144a0100714d760.jpg"><img src="https://pic.imgdb.cn/item/640b1bc4f144a0100714d760.jpg"></a></p><p><a href="https://pic.imgdb.cn/item/6413d825a682492fcc904db0.jpg"><img src="https://pic.imgdb.cn/item/6413d825a682492fcc904db0.jpg"></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">在mian()函数的<span class="keyword">while</span>循环里，每<span class="number">500</span>毫秒以软件触发方式进行一次ADC转换方式</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">HAL_ADC_Start(&amp;hadc1); <span class="comment">//必须每次启动转换</span></span><br><span class="line"><span class="keyword">if</span> (HAL_ADC_PollForConversion(&amp;hadc1,<span class="number">200</span>)==HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> val=HAL_ADC_GetValue(&amp;hadc1); <span class="comment">//读取转换结果</span></span><br><span class="line">LCD_ShowUintX(orgX,orgY,val, <span class="number">5</span>); <span class="comment">//5位显示，前端补空格</span></span><br><span class="line"><span class="type">uint32_t</span> Volt=<span class="number">3300</span>*val; <span class="comment">//以mV为单位</span></span><br><span class="line">Volt=Volt&gt;&gt;<span class="number">12</span>; <span class="comment">//除以2^12</span></span><br><span class="line">LCD_ShowUintX(voltX,voltY,Volt, <span class="number">4</span>); <span class="comment">//4位显示，前端补空格</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// HAL_ADC_Stop(&amp;hadc1); //无需每次都停止</span></span><br><span class="line">HAL_Delay(<span class="number">500</span>);</span><br><span class="line"><span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="9-2定时器触发ADC转换"><a href="#9-2定时器触发ADC转换" class="headerlink" title="9.2定时器触发ADC转换"></a>9.2定时器触发ADC转换</h4><p>工程链接：<a href="https://wwqe.lanzouo.com/imGIH0qapobc">https://wwqe.lanzouo.com/imGIH0qapobc</a></p><p><a href="https://pic.imgdb.cn/item/6413d949a682492fcc92fd91.jpg"><img src="https://pic.imgdb.cn/item/6413d949a682492fcc92fd91.jpg"></a></p><ul><li>ExternalTriggerConversionSource，设置启动ADC转换的外部触发信号源，这里选择<em><strong>Timer3TriggerOutEvent</strong></em>，也就是定时器TIM3的TRGO信号</li><li>External Trigger Conversion Edge，设置触发转换的跳变沿，这里选择上跳沿，<em><strong>因为<code>TRGO</code>是一个短时正脉冲信号</strong></em></li><li>开启ADC1的全局中断，在转换完成事件（ADC_IT_EOC）中断里读取转换结果。</li><li><a href="https://pic.imgdb.cn/item/6413d99fa682492fcc93b9b6.jpg"><img src="https://pic.imgdb.cn/item/6413d99fa682492fcc93b9b6.jpg"></a></li></ul><p>TIM3的设置：</p><p><a href="https://pic.imgdb.cn/item/6413dab6a682492fcc961ac5.jpg"><img src="https://pic.imgdb.cn/item/6413dab6a682492fcc961ac5.jpg"></a></p><ul><li>使TIM3定时周期为500ms</li><li>触发事件选择（Trigger Event Selection）设置为Update Event，也就是以UEV事件信号作为TRGO信号、</li></ul><p>回调函数</p><p><em><strong>注：无须开启TIM3的全局中断，TGRO信号也是正常输出的</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="comment">/* ADC的转换完成事件(ADC_IT_EOC)中断回调函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_ADC_ConvCpltCallback</span><span class="params">(ADC_HandleTypeDef* hadc)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (hadc-&gt;Instance == ADC1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> val=HAL_ADC_GetValue(hadc);<span class="comment">//读取转换结果</span></span><br><span class="line">LCD_ShowUintX(orgX,orgY,val, <span class="number">5</span>); <span class="comment">//5位显示，前端补空格</span></span><br><span class="line"><span class="type">uint32_t</span> Volt=<span class="number">3300</span>*val; <span class="comment">//以mV为单位</span></span><br><span class="line">Volt=Volt&gt;&gt;<span class="number">12</span>; <span class="comment">//除以2^12</span></span><br><span class="line">LCD_ShowUintX(voltX,voltY,Volt, <span class="number">4</span>); <span class="comment">//4位显示，前端补空格</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure><p><a href="https://jiangqqpan.github.io/file/ADC.pdf"><strong>ADC文档链接</strong></a></p><h4 id="9-3多通道和DMA传输"><a href="#9-3多通道和DMA传输" class="headerlink" title="9.3多通道和DMA传输"></a>9.3多通道和DMA传输</h4><p>工程链接：<a href="https://wwqe.lanzouo.com/iX7ip0qapo4f">https://wwqe.lanzouo.com/iX7ip0qapo4f</a></p><p>这里以ADC1的三个通道为例</p><p><a href="https://pic.imgdb.cn/item/6413dbfca682492fcc98b469.jpg"><img src="https://pic.imgdb.cn/item/6413dbfca682492fcc98b469.jpg"></a></p><p><a href="https://pic.imgdb.cn/item/6413dc5aa682492fcc99899d.jpg"><img src="https://pic.imgdb.cn/item/6413dc5aa682492fcc99899d.jpg"></a></p><ul><li><input checked="" disabled="" type="checkbox"> <em>当规则转换组有多个通道时，应该使用扫描模式（Scan Conversion Mode）</em></li></ul><p>注：在配置ADC时要使能扫描模式的DMA</p><p><a href="https://pic.imgdb.cn/item/6413dd03a682492fcc9afdce.jpg"><img src="https://pic.imgdb.cn/item/6413dd03a682492fcc9afdce.jpg"></a></p><p>设置Rank的输入通道和采样时间——每个通道的采样时间可以不一样，三个Ran里模拟通道出现的顺序就是规则组转换的顺序。</p><p><a href="https://pic.imgdb.cn/item/6413dda3a682492fcc9c58f4.jpg"><img src="https://pic.imgdb.cn/item/6413dda3a682492fcc9c58f4.jpg"></a></p><p>特别注意： 外设使用DMA时是否需要开启外设的全局中断，不同的外设情况不一样。例如，<em><strong>UART 使用DMA时就必须开启UART的全局中断</strong></em>，虽然<em><strong>可以禁止UART的两个主要中断事件源</strong></em>。在外设使用DMA时，<em><strong>建议尽量不开启外设的全局中断，若必须开启，也要禁止外设 的主要事件源产生硬件中断，因为DMA的传输完成事件中断使用外设的回调函数，若开启外 设的中断事件源，则可能导致一个事件发生时回调函数被调用两次。</strong></em></p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BATCH_DATA_LEN 3      <span class="comment">//  DMA数据缓冲区长度，必须是通道数的整数倍</span></span></span><br><span class="line"><span class="type">uint32_t</span> dmaDataBuffer[BATCH_DATA_LEN];  <span class="comment">//DMA数据缓冲区</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lcd_init();</span><br><span class="line">lcd_show_string(<span class="number">10</span>,<span class="number">10</span>,<span class="number">400</span>,<span class="number">20</span>,<span class="number">16</span>,<span class="string">&quot;DEMO:ADC+DMA&quot;</span>,GREEN);</span><br><span class="line">HAL_ADC_Start_DMA(&amp;hadc1,dmaDataBuffer,BATCH_DATA_LEN);</span><br><span class="line">HAL_TIM_Base_Start(&amp;htim3);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_ADC_ConvCpltCallback</span><span class="params">(ADC_HandleTypeDef* hadc)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint32_t</span> adcValue=<span class="number">0</span>,Volt;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">uint8_t</span> i=<span class="number">0</span>;i&lt;BATCH_DATA_LEN;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    adcValue = dmaDataBuffer[i]; <span class="comment">//这是缓冲区里3个通道的转换结果</span></span><br><span class="line">    Volt = adcValue * <span class="number">3300</span>;  <span class="comment">//以mV为毫伏</span></span><br><span class="line">    Volt = Volt &gt;&gt; <span class="number">12</span>;</span><br><span class="line">    lcd_show_num(<span class="number">10</span>,i*<span class="number">20</span>+<span class="number">50</span>,Volt,<span class="keyword">sizeof</span>(Volt),<span class="number">16</span>,RED);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-4双ADC同步转换"><a href="#9-4双ADC同步转换" class="headerlink" title="9,4双ADC同步转换"></a>9,4双ADC同步转换</h4><p>工程链接：<a href="https://wwqe.lanzouo.com/ia6qr0qapoij">https://wwqe.lanzouo.com/ia6qr0qapoij</a></p><p><em>开启TIM3定时器</em></p><p>双ADC同步转换时CUBEMX的配置</p><p><a href="https://pic.imgdb.cn/item/641309faebf10e5d5382c63a.jpg"><img src="https://pic.imgdb.cn/item/641309faebf10e5d5382c63a.jpg"></a></p><p><strong>多重ADC模式，只能使用DMA方式传输数据。</strong></p><p>具体完整配置：</p><p><a href="https://pic.imgdb.cn/item/64130acfebf10e5d5384fd9b.jpg"><img src="https://pic.imgdb.cn/item/64130acfebf10e5d5384fd9b.jpg"></a></p><p><a href="https://pic.imgdb.cn/item/64130b38ebf10e5d53862620.jpg"><img src="https://pic.imgdb.cn/item/64130b38ebf10e5d53862620.jpg"></a></p><p><em><strong>注：在很多版本的CUBEMX中,当ADC1和ADC2配置为同步规则转换时，ADC2的DMA流不能设置为Enable，这是软件自带的一个小bug，需要在程序中去进行修改。但每次重新生成程序，依然会重置回去，要注意每次都要修改。</strong></em></p><p>程序代码：</p><p>.c文件中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lcd.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BATCH_DATA_LEN 1<span class="comment">//双重ADC采集一次存储的32位数据</span></span></span><br><span class="line"><span class="type">uint32_t</span> dmaDataBuffer[BATCH_DATA_LEN];<span class="comment">//DMA数据缓冲区</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lcd_init();</span><br><span class="line">lcd_show_string(<span class="number">10</span>,<span class="number">10</span>,<span class="number">400</span>,<span class="number">20</span>,<span class="number">16</span>,<span class="string">&quot;Demo:Shuan ADC&quot;</span>,BLUE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//以多重模式DMA传输方式启动ADC1和ADC2</span></span><br><span class="line">HAL_ADCEx_MultiModeStart_DMA(&amp;hadc1,dmaDataBuffer,BATCH_DATA_LEN);<span class="comment">//启动ADC1</span></span><br><span class="line">HAL_ADCEx_MultiModeStart_DMA(&amp;hadc2,dmaDataBuffer,BATCH_DATA_LEN);<span class="comment">//启动ADC2</span></span><br><span class="line">HAL_TIM_Base_Start(&amp;htim3);  </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DMA传输完成事件中断的回调函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_ADC_ConvCpltCallback</span><span class="params">(ADC_HandleTypeDef* hadc)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint32_t</span> Volt;</span><br><span class="line">  <span class="type">uint32_t</span> adcValue=dmaDataBuffer[<span class="number">0</span>];  <span class="comment">//ADC1 and ADC2 data</span></span><br><span class="line">  </span><br><span class="line">  <span class="type">uint32_t</span> ADC1_val=adcValue &amp; <span class="number">0X0000FFFF</span>;  <span class="comment">//low 16 bit is adc1 data</span></span><br><span class="line">  Volt=<span class="number">3300</span>*ADC1_val;<span class="comment">//mv</span></span><br><span class="line">  Volt=Volt&gt;&gt;<span class="number">12</span>; <span class="comment">//除以1024</span></span><br><span class="line">  lcd_show_num(<span class="number">10</span>,<span class="number">30</span>,Volt,<span class="keyword">sizeof</span>(Volt),<span class="number">16</span>,BLACK);</span><br><span class="line">  </span><br><span class="line">  <span class="type">uint32_t</span> ADC2_val=adcValue &amp; <span class="number">0XFFFF0000</span>;  <span class="comment">//high 16 bit is adc2 data</span></span><br><span class="line">  ADC2_val=ADC2_val&gt;&gt;<span class="number">16</span>;</span><br><span class="line">  Volt=<span class="number">3300</span>*ADC2_val;</span><br><span class="line">  Volt=Volt&gt;&gt;<span class="number">12</span>;</span><br><span class="line">  lcd_show_num(<span class="number">10</span>,<span class="number">50</span>,Volt,<span class="keyword">sizeof</span>(Volt),<span class="number">16</span>,BLACK);  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>在双ADC同步模式下，MCU自动将ADC1和ADC2一次转换的数据组合成一个32位数据，高16位是ADC1的数据，低16位是ADC2的数据。</p><h3 id="10-DMA"><a href="#10-DMA" class="headerlink" title="10.DMA"></a>10.DMA</h3><p>工程链接：<a href="https://wwqe.lanzouo.com/ipB8z0qapiej">https://wwqe.lanzouo.com/ipB8z0qapiej</a></p><p>DMA（Direct Memory Access，直接存储器访问）是实现存储器与外设、存储器与存储器之间高效数据传输的方法</p><ul><li><input checked="" disabled="" type="checkbox"> DMA控制器</li><li><input checked="" disabled="" type="checkbox"> DMA流</li><li><input checked="" disabled="" type="checkbox"> DMA请求</li><li><input checked="" disabled="" type="checkbox"> 仲裁器</li></ul><p>一个DMA流配置一个DMA请求后，就构成一个单方向的DMA数据传输链路，DMA传输属性就由DMA流的参数配置决定</p><ul><li>DMA流和通道</li><li>DMA流的优先级别</li><li>源和目标的数据宽度</li><li>传输数据量的大小</li><li>源和目标地址指针是否自增加</li><li>DMA工作模式：Normal或Circular</li><li>DMA传输方向</li><li>是否使用FIFO</li></ul><p>DMA传输模式：</p><ul><li>外设到存储器（Peripheral To Memory），例如ADC采集的数据存入内存中的缓存区</li><li>存储器到外设（Memory To Peripheral），例如将内存中的数据通过USART接口发出</li><li>存储器到存储器（Memory To Memory），例如外部SRAM中的数据复制到内存中，只有DMA2控制器有这种传输模式</li></ul><p>数据宽度：</p><p>​            数据宽度（Data width）是源和目标传输的基本数据单元的大小，有字节（Byte）、半字（Half word）和字（word）三种大小。</p><p>DMA工作模式：</p><ul><li>正常（Normal）模式是指传输完一个缓存区的数据后，DMA传输就停止了。</li><li>循环（Circular）模式是指启动一个缓存区的数据传输后，会循环执行这个DMA数据传输任务</li></ul><p>例如，HAL_UART_Receive_DMA()，正常模式只传输一次，循环模式就能连续接收</p><p>DMA流的优先级别：</p><p>​    每个DMA流有一个可设置的软件优先级别，有4种：</p><ul><li>Very high（非常高）</li><li>High（高）</li><li>Medium（中等）</li><li>Low（低）</li></ul><p>如果两个DMA流的软件优先级别相同，则流编号更小的优先级别更高，流编号就是DMA流的硬件优先级。</p><p><em><strong>DMA流有自己的中断号和ISR函数</strong></em></p><p>USART+DMA主程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">TFTLCD_Init();</span><br><span class="line"><span class="comment">// 需要打开USART的全局中断，但是可以关闭中断事件</span></span><br><span class="line">__HAL_UART_DISABLE_IT(&amp;huart1, UART_IT_TC);<span class="comment">//关闭USART1的发送完成事件中断</span></span><br><span class="line">__HAL_UART_DISABLE_IT(&amp;huart1, UART_IT_RXNE);<span class="comment">//关闭USART1的接收完成事件中断</span></span><br><span class="line"><span class="type">uint8_t</span> hello1[]=<span class="string">&quot;Hello,DMA transmit\n&quot;</span>;</span><br><span class="line">HAL_UART_Transmit_DMA(&amp;huart1,hello1,<span class="keyword">sizeof</span>(hello1)); <span class="comment">//DMA方式发送</span></span><br><span class="line">HAL_UART_Receive_DMA(&amp;huart1, rxBuffer,RX_CMD_LEN); <span class="comment">//DMA方式循环接收</span></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"><span class="comment">/* Infinite loop */</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://jiangqqpan.github.io/file/DMA.pdf"><strong>DMA文档链接</strong></a></p><h3 id="11-SPI接口通信"><a href="#11-SPI接口通信" class="headerlink" title="11.SPI接口通信"></a>11.SPI接口通信</h3><p><strong>SPI硬件接口</strong>：</p><p>SPI是串行外设接口（Serial Peripheral Interface）</p><p>SPI接口的设备分为主设备（Master）和从设备（Slave），一个主设备可以连接一个或多个从设备</p><p><a href="https://pic.imgdb.cn/item/6413ea15a682492fccba3e34.jpg"><img src="https://pic.imgdb.cn/item/6413ea15a682492fccba3e34.jpg"></a></p><p><strong>SPI传输协议：</strong></p><p>SPI通讯有4种时序模式，由SPI控制寄存器SPI_CR1中的CPOL和CPHA位控制。</p><ul><li><input checked="" disabled="" type="checkbox"> <strong>CPOL（Clock Polority）时钟极性</strong>，控制SCK引脚在空闲状态时的电平。如果CPOL&#x3D;0，则空闲时SCK为低电平；若CPOL&#x3D;1，则空闲时SCK为高电平。</li><li><input checked="" disabled="" type="checkbox"> <strong>CPHA（Clock Phase）时钟相位</strong>，若CPHA&#x3D;0，则在SCK的第1个边沿对数据采样；如果CPHA&#x3D;1，则在SCK的第2个边沿对数据采样。</li></ul><p><em>CPHA&#x3D;0表示在SCK的第1个边沿读取数据，即图中虚线表示的时刻。读取数据的时刻发生在SCK的下跳沿（CPOL&#x3D;1）时刻或上跳沿（CPOL&#x3D;0）时刻。MISO、MOSI上的数据变化在读取数据的SCK前一个跳变沿时刻发生变化。</em></p><p><a href="https://pic.imgdb.cn/item/6413eb10a682492fccbc5a25.jpg"><img src="https://pic.imgdb.cn/item/6413eb10a682492fccbc5a25.jpg"></a></p><p>CPHA&#x3D;1表示在SCK的第2个边沿读取数据，即图中的虚线表示的时刻。读取数据的时刻发生在SCK上跳沿（CPOL&#x3D;1）时刻或下跳沿（CPOL&#x3D;0）时刻。MISO、MOSI上的数据在读取数据的SCK前一个跳变沿时刻发生变化。</p><p><a href="https://pic.imgdb.cn/item/6413eb3ba682492fccbcb892.jpg"><img src="https://pic.imgdb.cn/item/6413eb3ba682492fccbcb892.jpg"></a></p><p><a href="https://pic.imgdb.cn/item/6413eb57a682492fccbcf3c1.jpg"><img src="https://pic.imgdb.cn/item/6413eb57a682492fccbcf3c1.jpg"></a></p><p><em><strong>注：SPI主机和从机必须使用相同的SPI时序。</strong></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-通用定时器生成PWM波&quot;&gt;&lt;a href=&quot;#1-通用定时器生成PWM波&quot; class=&quot;headerlink&quot; title=&quot;1. 通用定时器生成PWM波&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. 通用定时器生成PWM波&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;1-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>小收藏</title>
    <link href="https://jiangqqpan.github.io/2022/08/24/%E5%B0%8F%E6%94%B6%E8%97%8F/"/>
    <id>https://jiangqqpan.github.io/2022/08/24/%E5%B0%8F%E6%94%B6%E8%97%8F/</id>
    <published>2022-08-24T09:04:12.000Z</published>
    <updated>2023-12-02T06:39:25.271Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="vscode-好用的一些小插件"><a href="#vscode-好用的一些小插件" class="headerlink" title="vscode 好用的一些小插件"></a><a href="https://blog.csdn.net/To_be_a_fisher/article/details/125681106">vscode 好用的一些小插件</a></h2><hr><h2 id="在线思维导图绘制"><a href="#在线思维导图绘制" class="headerlink" title="在线思维导图绘制"></a><a href="https://boardmix.cn/">在线思维导图绘制</a></h2><hr><h2 id="降重软件（秘塔写作猫）"><a href="#降重软件（秘塔写作猫）" class="headerlink" title="降重软件（秘塔写作猫）"></a><a href="https://xiezuocat.com/#/">降重软件（秘塔写作猫）</a></h2><hr><h2 id="Canva可画"><a href="#Canva可画" class="headerlink" title="Canva可画"></a><a href="https://www.canva.cn/">Canva可画</a></h2><hr><h2 id="一个不错的免费图床-聚合图床"><a href="#一个不错的免费图床-聚合图床" class="headerlink" title="一个不错的免费图床(聚合图床)"></a><a href="https://www.superbed.cn/">一个不错的免费图床(<strong>聚合图床</strong>)</a></h2><hr><h2 id="微软恢复工具MediaCreationTool使用方法"><a href="#微软恢复工具MediaCreationTool使用方法" class="headerlink" title="微软恢复工具MediaCreationTool使用方法"></a><a href="https://jiangqqpan.github.io/file/%E5%BE%AE%E8%BD%AF%E6%81%A2%E5%A4%8D%E5%B7%A5%E5%85%B7MediaCreationTool%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.pdf">微软恢复工具MediaCreationTool使用方法</a></h2><hr><h2 id="QuartusII-13-1安装及破解"><a href="#QuartusII-13-1安装及破解" class="headerlink" title="QuartusII_13.1安装及破解"></a><a href="https://blog.csdn.net/weixin_46075647/article/details/123381037">QuartusII_13.1安装及破解</a></h2><hr><h2 id="Modelsim-SE-64-10-4破解"><a href="#Modelsim-SE-64-10-4破解" class="headerlink" title="Modelsim SE-64 10.4破解"></a><a href="https://blog.csdn.net/Lily_9/article/details/80325362">Modelsim SE-64 10.4破解</a></h2><hr><h2 id="proteus8-9仿真闪退怎么解决"><a href="#proteus8-9仿真闪退怎么解决" class="headerlink" title="proteus8.9仿真闪退怎么解决"></a><a href="https://blog.csdn.net/qq_52074345/article/details/123762577">proteus8.9仿真闪退怎么解决</a></h2><hr><h2 id="注册表修复清理工具-CCleaner"><a href="#注册表修复清理工具-CCleaner" class="headerlink" title="注册表修复清理工具 CCleaner"></a>注册表修复清理工具 CCleaner</h2><h2 id="Keil-MDK5修改配色"><a href="#Keil-MDK5修改配色" class="headerlink" title="Keil MDK5修改配色"></a><a href="https://www.codenong.com/cs105389576/">Keil MDK5修改配色</a></h2><h2 id="STM32CUBEIDE代码补全插件（两个）："><a href="#STM32CUBEIDE代码补全插件（两个）：" class="headerlink" title="STM32CUBEIDE代码补全插件（两个）："></a>STM32CUBEIDE代码补全插件（两个）：</h2><p><a href="https://wwqe.lanzouo.com/ic2vG0qm5dsf">https://wwqe.lanzouo.com/ic2vG0qm5dsf</a></p><p><a href="https://wwqe.lanzouo.com/i7zgR0qm5dwj">https://wwqe.lanzouo.com/i7zgR0qm5dwj</a></p><h2 id="GitHub-客户端"><a href="#GitHub-客户端" class="headerlink" title="GitHub 客户端"></a><a href="https://www.5axxw.com/wiki/content/63bjbt">GitHub 客户端</a></h2><h2 id="蓝奏云网址：https-up-woozooo-com-account-php-action-login-amp-ref-mydisk-php"><a href="#蓝奏云网址：https-up-woozooo-com-account-php-action-login-amp-ref-mydisk-php" class="headerlink" title="蓝奏云网址：https://up.woozooo.com/account.php?action=login&amp;ref=/mydisk.php"></a>蓝奏云网址：<a href="https://up.woozooo.com/account.php?action=login&amp;ref=/mydisk.php">https://up.woozooo.com/account.php?action=login&amp;ref=/mydisk.php</a></h2><h2 id="路过图床"><a href="#路过图床" class="headerlink" title="路过图床"></a>路过图床</h2><p><a href="https://imgse.com/">路过图床 - 免费图片上传, 专业图片外链, 免费公共图床 (imgse.com)</a></p><h2 id="梯子"><a href="#梯子" class="headerlink" title="梯子"></a><a href="https://www.lx8.biz/">梯子</a></h2><h2 id="MathType-的安装和下载"><a href="#MathType-的安装和下载" class="headerlink" title="MathType 的安装和下载"></a>MathType 的安装和下载</h2><p>安装文章链接 <a href="https://blog.csdn.net/IGSzt/article/details/127309096?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169589603116800213059771%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169589603116800213059771&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-127309096-null-null.142%5Ev94%5Einsert_down28v1&amp;utm_term=mathtype&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/IGSzt/article/details/127309096?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169589603116800213059771%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169589603116800213059771&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-127309096-null-null.142^v94^insert_down28v1&amp;utm_term=mathtype&amp;spm=1018.2226.3001.4187</a></p><p>下载链接  <a href="https://wwqe.lanzouy.com/iJfCA1aa17rc">https://wwqe.lanzouy.com/iJfCA1aa17rc</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;vscode-好用的一些小插件&quot;&gt;&lt;a href=&quot;#vscode-好用的一些小插件&quot; class=&quot;headerlink&quot; title=&quot;vscode 好用的一些小插件&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.csdn.net/To_be</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HEXO博客搭建教程</title>
    <link href="https://jiangqqpan.github.io/2022/07/23/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <id>https://jiangqqpan.github.io/2022/07/23/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</id>
    <published>2022-07-23T07:59:44.000Z</published>
    <updated>2023-10-15T08:18:30.685Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="hexo-上传部署命令"><a href="#hexo-上传部署命令" class="headerlink" title="hexo 上传部署命令"></a>hexo 上传部署命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure><hr><h2 id="HEXO搭建详细教程"><a href="#HEXO搭建详细教程" class="headerlink" title="HEXO搭建详细教程"></a><a href="https://jiangqqpan.github.io/file/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B.pdf">HEXO搭建详细教程</a></h2><hr><h2 id="hexo-上传PDF文件方法"><a href="#hexo-上传PDF文件方法" class="headerlink" title="hexo 上传PDF文件方法"></a>hexo 上传PDF文件方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">示例中的https://jiangqqpan.github.io/file/代表自己的上传github的PDF文件的根地址</span><br><span class="line">[HEXO搭建详细教程](https://jiangqqpan.github.io/file/博客搭建详细教程.pdf)</span><br></pre></td></tr></table></figure><hr><h2 id="HEXO美化教程"><a href="#HEXO美化教程" class="headerlink" title="HEXO美化教程"></a><a href="https://tzy1997.com/articles/hexo1606/">HEXO美化教程</a></h2><hr><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p><a href="https://blog.csdn.net/m0_66964652/article/details/122882957?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E5%AE%89%E8%A3%85HEXO&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-122882957.nonecase&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/m0_66964652/article/details/122882957?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E5%AE%89%E8%A3%85HEXO&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-122882957.nonecase&amp;spm=1018.2226.3001.4187</a></p><p>以管理员身份打开cmd，执行hexo全局安装指令</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;hexo-上传部署命令&quot;&gt;&lt;a href=&quot;#hexo-上传部署命令&quot; class=&quot;headerlink&quot; title=&quot;hexo 上传部署命令&quot;&gt;&lt;/a&gt;hexo 上传部署命令&lt;/h2&gt;&lt;figure class=&quot;highlight plainte</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HEXO问题解决方案</title>
    <link href="https://jiangqqpan.github.io/2022/07/22/HEXO%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://jiangqqpan.github.io/2022/07/22/HEXO%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2022-07-22T08:35:49.000Z</published>
    <updated>2023-10-15T08:18:36.983Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="/images/1.png"><br><img src="/images/1_1.png"></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/images/1.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/1_1.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Stm32小知识</title>
    <link href="https://jiangqqpan.github.io/2022/07/19/Stm32%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <id>https://jiangqqpan.github.io/2022/07/19/Stm32%E5%B0%8F%E7%9F%A5%E8%AF%86/</id>
    <published>2022-07-19T13:45:18.000Z</published>
    <updated>2023-10-15T08:19:09.552Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="STM32-keil下载程序后不自动运行程序-必须复位（或重新上电）一下才可以运行"><a href="#STM32-keil下载程序后不自动运行程序-必须复位（或重新上电）一下才可以运行" class="headerlink" title="STM32 keil下载程序后不自动运行程序,必须复位（或重新上电）一下才可以运行"></a><a href="https://blog.csdn.net/jiekaile/article/details/120779350">STM32 keil下载程序后不自动运行程序,必须复位（或重新上电）一下才可以运行</a></h2><hr><h2 id="keil-L6200E-Symbol-XXX-multiply-defined-O…错误解决方法"><a href="#keil-L6200E-Symbol-XXX-multiply-defined-O…错误解决方法" class="headerlink" title="[keil]L6200E: Symbol XXX multiply defined .O…错误解决方法"></a><a href="https://blog.csdn.net/MoreXD/article/details/121979087">[keil]L6200E: Symbol XXX multiply defined .O…错误解决方法</a></h2><hr><p><img src="https://pic.imgdb.cn/item/64cb9af41ddac507cc3324c0.jpg"></p><p><img src="https://pic.imgdb.cn/item/64cb9b171ddac507cc3389d8.jpg"></p><h2 id="HAL库移植7脚SPI-OLED"><a href="#HAL库移植7脚SPI-OLED" class="headerlink" title="HAL库移植7脚SPI OLED"></a><a href="https://blog.csdn.net/qq_45822269/article/details/116787925">HAL库移植7脚SPI OLED</a></h2><hr><h2 id="HAL库-CubeMX–OLED显示小数和不同数据类型的变量值的显示"><a href="#HAL库-CubeMX–OLED显示小数和不同数据类型的变量值的显示" class="headerlink" title="HAL库 CubeMX–OLED显示小数和不同数据类型的变量值的显示"></a><a href="https://blog.csdn.net/m0_51429690/article/details/119778340">HAL库 CubeMX–OLED显示小数和不同数据类型的变量值的显示</a></h2><hr><h2 id="STM32CubeMX-ESP8266-AT指令实现MQTT协议并接入阿里云IOT平台"><a href="#STM32CubeMX-ESP8266-AT指令实现MQTT协议并接入阿里云IOT平台" class="headerlink" title="STM32CubeMX ESP8266 AT指令实现MQTT协议并接入阿里云IOT平台"></a><a href="https://blog.csdn.net/u014779536/article/details/106355346">STM32CubeMX ESP8266 AT指令实现MQTT协议并接入阿里云IOT平台</a></h2><hr><p><a href="https://blog.csdn.net/m0_61213696/article/details/123227712">枚举类型简介</a><br><img src="/images/%E6%9E%9A%E4%B8%BE.png"><br><img src="/images/DAC1.png"></p><hr><h2 id="移植现有工程的方法"><a href="#移植现有工程的方法" class="headerlink" title="移植现有工程的方法"></a>移植现有工程的方法</h2><p>删除以下选中的文件，然后修改mx工程文件（.ioc文件）工程名和文件名统一即可</p><p><img src="https://pic.imgdb.cn/item/64d9e2fc1ddac507cc90737e.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;STM32-keil下载程序后不自动运行程序-必须复位（或重新上电）一下才可以运行&quot;&gt;&lt;a href=&quot;#STM32-keil下载程序后不自动运行程序-必须复位（或重新上电）一下才可以运行&quot; class=&quot;headerlink&quot; title=&quot;STM32</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ESP32</title>
    <link href="https://jiangqqpan.github.io/2022/03/27/ESP32/"/>
    <id>https://jiangqqpan.github.io/2022/03/27/ESP32/</id>
    <published>2022-03-27T03:05:52.000Z</published>
    <updated>2023-10-15T08:18:04.733Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>STM32CUBEMX</title>
    <link href="https://jiangqqpan.github.io/2022/03/27/STM32CUBEMX/"/>
    <id>https://jiangqqpan.github.io/2022/03/27/STM32CUBEMX/</id>
    <published>2022-03-27T03:05:28.000Z</published>
    <updated>2023-10-15T08:19:16.274Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="STM32-CubeMx使用教程一–安装教程"><a href="#STM32-CubeMx使用教程一–安装教程" class="headerlink" title="STM32 CubeMx使用教程一–安装教程"></a><a href="https://blog.csdn.net/as480133937/article/details/98885316">STM32 CubeMx使用教程一–安装教程</a></h2><h2 id="STM32CubeMX教程二–基本使用-新建工程点亮LED灯"><a href="#STM32CubeMX教程二–基本使用-新建工程点亮LED灯" class="headerlink" title="STM32CubeMX教程二–基本使用(新建工程点亮LED灯)"></a><a href="https://blog.csdn.net/as480133937/article/details/98947162">STM32CubeMX教程二–基本使用(新建工程点亮LED灯)</a></h2><h2 id="HAL库-STM32CubeMX教程三—-外部中断-HAL库GPIO讲解"><a href="#HAL库-STM32CubeMX教程三—-外部中断-HAL库GPIO讲解" class="headerlink" title="HAL库 STM32CubeMX教程三—-外部中断(HAL库GPIO讲解)"></a><a href="https://blog.csdn.net/as480133937/article/details/98983268">HAL库 STM32CubeMX教程三—-外部中断(HAL库GPIO讲解)</a></h2><h2 id="HAL库-STM32CubeMX教程四—UART串口通信详解"><a href="#HAL库-STM32CubeMX教程四—UART串口通信详解" class="headerlink" title="HAL库 STM32CubeMX教程四—UART串口通信详解"></a><a href="https://blog.csdn.net/as480133937/article/details/99073783">HAL库 STM32CubeMX教程四—UART串口通信详解</a></h2><h2 id="HAL库-STM32CubeMX教程五—-看门狗-独立看门狗-窗口看门狗"><a href="#HAL库-STM32CubeMX教程五—-看门狗-独立看门狗-窗口看门狗" class="headerlink" title="HAL库 STM32CubeMX教程五—-看门狗(独立看门狗,窗口看门狗)"></a><a href="https://blog.csdn.net/as480133937/article/details/99121645">HAL库 STM32CubeMX教程五—-看门狗(独立看门狗,窗口看门狗)</a></h2><h2 id="HAL库-STM32CubeMX教程六—-定时器中断"><a href="#HAL库-STM32CubeMX教程六—-定时器中断" class="headerlink" title="HAL库 STM32CubeMX教程六—-定时器中断"></a><a href="https://blog.csdn.net/as480133937/article/details/99201209">HAL库 STM32CubeMX教程六—-定时器中断</a></h2><h2 id="HAL库-STM32CubeMX教程七—PWM输出-呼吸灯"><a href="#HAL库-STM32CubeMX教程七—PWM输出-呼吸灯" class="headerlink" title="HAL库 STM32CubeMX教程七—PWM输出(呼吸灯)"></a><a href="https://blog.csdn.net/as480133937/article/details/99231677">HAL库 STM32CubeMX教程七—PWM输出(呼吸灯)</a></h2><h2 id="HAL库-STM32CubeMX教程八—定时器输入捕获"><a href="#HAL库-STM32CubeMX教程八—定时器输入捕获" class="headerlink" title="HAL库 STM32CubeMX教程八—定时器输入捕获"></a><a href="https://blog.csdn.net/as480133937/article/details/99407485">HAL库 STM32CubeMX教程八—定时器输入捕获</a></h2><h2 id="HAL库-STM32CubeMX教程九—ADC"><a href="#HAL库-STM32CubeMX教程九—ADC" class="headerlink" title="HAL库 STM32CubeMX教程九—ADC"></a><a href="https://blog.csdn.net/as480133937/article/details/99627062">HAL库 STM32CubeMX教程九—ADC</a></h2><h2 id="HAL库-STM32CubeMX教程十—DAC"><a href="#HAL库-STM32CubeMX教程十—DAC" class="headerlink" title="HAL库 STM32CubeMX教程十—DAC"></a><a href="https://blog.csdn.net/as480133937/article/details/102309242">HAL库 STM32CubeMX教程十—DAC</a></h2><h2 id="HAL库-STM32CubeMX教程十一—DMA-串口DMA发送接收"><a href="#HAL库-STM32CubeMX教程十一—DMA-串口DMA发送接收" class="headerlink" title="HAL库 STM32CubeMX教程十一—DMA (串口DMA发送接收)"></a><a href="https://blog.csdn.net/as480133937/article/details/104827639">HAL库 STM32CubeMX教程十一—DMA (串口DMA发送接收)</a></h2><h2 id="HAL库-STM32CubeMX教程十二—IIC-读取AT24C02"><a href="#HAL库-STM32CubeMX教程十二—IIC-读取AT24C02" class="headerlink" title="HAL库 STM32CubeMX教程十二—IIC(读取AT24C02 )"></a><a href="https://blog.csdn.net/as480133937/article/details/105259075">HAL库 STM32CubeMX教程十二—IIC(读取AT24C02 )</a></h2><h2 id="HAL库-STM32CubeMX教程十四—SPI"><a href="#HAL库-STM32CubeMX教程十四—SPI" class="headerlink" title="HAL库 STM32CubeMX教程十四—SPI"></a><a href="https://blog.csdn.net/as480133937/article/details/105849607?spm=1001.2014.3001.5502">HAL库 STM32CubeMX教程十四—SPI</a></h2><h2 id="STM32-HAL-CubeMX-串口IDLE接收空闲中断-DMA"><a href="#STM32-HAL-CubeMX-串口IDLE接收空闲中断-DMA" class="headerlink" title="STM32 HAL CubeMX 串口IDLE接收空闲中断+DMA"></a><a href="https://blog.csdn.net/as480133937/article/details/105013368">STM32 HAL CubeMX 串口IDLE接收空闲中断+DMA</a></h2><h2 id="PWM原理-PWM频率与占空比详解"><a href="#PWM原理-PWM频率与占空比详解" class="headerlink" title="PWM原理 PWM频率与占空比详解"></a><a href="https://blog.csdn.net/as480133937/article/details/103439546">PWM原理 PWM频率与占空比详解</a></h2><hr><h1 id="IO口的设置"><a href="#IO口的设置" class="headerlink" title="IO口的设置"></a>IO口的设置</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GPIO output level   引脚电平设置   高/低</span><br><span class="line">GPIO mode   GPIO模式     推挽输出/开漏输出</span><br><span class="line">GPIO Pull-up/Pull-dowm   上拉下拉电阻      上拉电阻/下拉电阻/无上拉或下拉</span><br><span class="line">Maxinum output speed   引脚速度设置   低速/中速/高速</span><br><span class="line">User Label    用户标签   给引脚设置名称  如LED0</span><br></pre></td></tr></table></figure><h1 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h1><h2 id="串口DMA及中断回调"><a href="#串口DMA及中断回调" class="headerlink" title="串口DMA及中断回调"></a><a href="https://www.cnblogs.com/lailai-laird/p/12618786.html">串口DMA及中断回调</a></h2><h2 id="串口-蓝牙模块"><a href="#串口-蓝牙模块" class="headerlink" title="串口+蓝牙模块"></a>串口+蓝牙模块</h2><p> <a href="https://blog.csdn.net/qq_42652838/article/details/107776265?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2.pc_relevant_paycolumn_v3&utm_relevant_index=5">串口+蓝牙模块网页教程</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在进行通过蓝牙的返回值判断数据的时候要特别注意（所有数据都是以HEX对应的值发回来的，例如A=0X41,</span><br><span class="line">最好不要用数字作为返回数据，以免出现习惯性的错误）</span><br><span class="line">（蓝牙手机APP一般需要在打开定位的情况下才能检测到蓝牙设备或模块）</span><br></pre></td></tr></table></figure><h2 id="串口重新定义函数"><a href="#串口重新定义函数" class="headerlink" title="串口重新定义函数"></a>串口重新定义函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">重新定义<span class="built_in">printf</span>函数</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> UART_HandleTypeDef huart1;   <span class="comment">//声明串口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数功能: 重定向c库函数printf到USART1</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">  HAL_UART_Transmit(&amp;huart1, (<span class="type">uint8_t</span> *)&amp;ch, <span class="number">1</span>, <span class="number">0xffff</span>);</span><br><span class="line">  <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//函数功能: 重定向c库函数getchar,scanf到USART1</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fgetc</span><span class="params">(FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint8_t</span> ch = <span class="number">0</span>;</span><br><span class="line">  HAL_UART_Receive(&amp;huart1, &amp;ch, <span class="number">1</span>, <span class="number">0xffff</span>);</span><br><span class="line">  <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="串口使用微库"><a href="#串口使用微库" class="headerlink" title="串口使用微库"></a>串口使用微库</h2><p><img src="/images/%E5%BE%AE%E5%BA%93.png"></p><h1 id="ADC小知识点"><a href="#ADC小知识点" class="headerlink" title="ADC小知识点"></a>ADC小知识点</h1><hr><p><img src="/images/adc4.png"><br><img src="/images/adc1.png"><br><img src="/images/adc2.png"><br><img src="/images/adc3.png"></p><hr><h1 id="基于STM32CUBEMX的TFT-LCDJ配置教程"><a href="#基于STM32CUBEMX的TFT-LCDJ配置教程" class="headerlink" title="基于STM32CUBEMX的TFT_LCDJ配置教程"></a>基于STM32CUBEMX的TFT_LCDJ配置教程</h1><h2 id="TFT-LCD"><a href="#TFT-LCD" class="headerlink" title="TFT_LCD"></a><a href="https://blog.csdn.net/weixin_43892323/article/details/107305536">TFT_LCD</a></h2><h1 id="STM32HAL-ADC-TIM-DMA采集交流信号-基于cubemx"><a href="#STM32HAL-ADC-TIM-DMA采集交流信号-基于cubemx" class="headerlink" title="STM32HAL ADC+TIM+DMA采集交流信号 基于cubemx"></a><a href="https://blog.csdn.net/qq_34022877/article/details/121941236?spm=1001.2101.3001.6650.12&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-12.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-12.pc_relevant_default&utm_relevant_index=18">STM32HAL ADC+TIM+DMA采集交流信号 基于cubemx</a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h1&gt;&lt;h2 id=&quot;STM32-CubeMx使用教程一–安装教程&quot;&gt;&lt;a href=&quot;#STM32-CubeMx使用教程一–安装教程&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
</feed>
