<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JIANGPAN</title>
  
  
  <link href="https://jiangqqpan.github.io/atom.xml" rel="self"/>
  
  <link href="https://jiangqqpan.github.io/"/>
  <updated>2023-03-08T14:53:15.049Z</updated>
  <id>https://jiangqqpan.github.io/</id>
  
  <author>
    <name>JP</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ESP8266</title>
    <link href="https://jiangqqpan.github.io/2023/03/08/ESP8266/"/>
    <id>https://jiangqqpan.github.io/2023/03/08/ESP8266/</id>
    <published>2023-03-08T07:55:05.000Z</published>
    <updated>2023-03-08T14:53:15.049Z</updated>
    
    <content type="html"><![CDATA[<h4 id="STM32CubeMX-ESP8266-AT指令实现MQTT协议并接入阿里云IOT平台源码解析"><a href="#STM32CubeMX-ESP8266-AT指令实现MQTT协议并接入阿里云IOT平台源码解析" class="headerlink" title="STM32CubeMX ESP8266 AT指令实现MQTT协议并接入阿里云IOT平台源码解析"></a>STM32CubeMX ESP8266 AT指令实现MQTT协议并接入阿里云IOT平台源码解析</h4><p>参考博客：<a href="https://blog.csdn.net/u014779536/article/details/106355346">https://blog.csdn.net/u014779536/article/details/106355346</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;STM32CubeMX-ESP8266-AT指令实现MQTT协议并接入阿里云IOT平台源码解析&quot;&gt;&lt;a href=&quot;#STM32CubeMX-ESP8266-AT指令实现MQTT协议并接入阿里云IOT平台源码解析&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C语言进制输出表示</title>
    <link href="https://jiangqqpan.github.io/2023/01/03/C%E8%AF%AD%E8%A8%80%E8%BF%9B%E5%88%B6%E8%BE%93%E5%87%BA%E8%A1%A8%E7%A4%BA/"/>
    <id>https://jiangqqpan.github.io/2023/01/03/C%E8%AF%AD%E8%A8%80%E8%BF%9B%E5%88%B6%E8%BE%93%E5%87%BA%E8%A1%A8%E7%A4%BA/</id>
    <published>2023-01-03T09:27:55.000Z</published>
    <updated>2023-01-03T09:29:57.317Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">%d 有符号<span class="number">10</span>进制整数</span><br><span class="line">%i 有符号<span class="number">10</span>进制整数</span><br><span class="line">%o 无符号<span class="number">8</span>进制整数</span><br><span class="line">%u 无符号<span class="number">10</span>进制整数</span><br><span class="line">%x 无符号的<span class="number">16</span>进制数字，并以小写abcdef表示</span><br><span class="line">%X 无符号的<span class="number">16</span>进制数字，并以大写ABCDEF表示</span><br><span class="line">%F/f 浮点数</span><br><span class="line">%E/e 用科学表示格式的浮点数</span><br><span class="line">%g 使用%f和%e表示中的总的位数表示最短的来表示浮点数 G 同g格式，但表示为指数</span><br><span class="line">%c 单个字符</span><br><span class="line">%s 字符串</span><br></pre></td></tr></table></figure><p>标题整型有无符号（unsigned）和有符号（signed）两种类型，在默认情况下声明的整型变量都是有符号的类型（char有点特别），如果需声明无符号类型的话就需要在类型前加上unsigned。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>STM32外设工作原理(基于HAL库)</title>
    <link href="https://jiangqqpan.github.io/2023/01/02/STM32%E5%A4%96%E8%AE%BE%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-%E5%9F%BA%E4%BA%8EHAL%E5%BA%93/"/>
    <id>https://jiangqqpan.github.io/2023/01/02/STM32%E5%A4%96%E8%AE%BE%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-%E5%9F%BA%E4%BA%8EHAL%E5%BA%93/</id>
    <published>2023-01-02T04:21:20.000Z</published>
    <updated>2023-03-10T12:10:29.121Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-通用定时器生成PWM波"><a href="#1-通用定时器生成PWM波" class="headerlink" title="1. 通用定时器生成PWM波"></a><strong>1. 通用定时器生成PWM波</strong></h3><h4 id="1-1-功能概述"><a href="#1-1-功能概述" class="headerlink" title="1.1 功能概述"></a>1.1 功能概述</h4><p><strong>通用定时器TIM2-TIM5，TIM9-TIM14，计数器位数，通道数不同</strong></p><p><a href="https://pic.imgdb.cn/item/63b25fc35d94efb26fbc4a9f.jpg"><img src="https://pic.imgdb.cn/item/63b25fc35d94efb26fbc4a9f.jpg"></a></p><h4 id="1-2-生成PWM波的原理"><a href="#1-2-生成PWM波的原理" class="headerlink" title="1.2 生成PWM波的原理"></a>1.2 生成PWM波的原理</h4><p>PWM（Pulse Width Modulation）就是脉冲宽度调制，PWM波就是具有一定占空比的方波信号，通过定时器的设置可以控制方波的频率和占空比。</p><p><a href="https://pic.imgdb.cn/item/63b260525d94efb26fbce793.jpg"><img src="https://pic.imgdb.cn/item/63b260525d94efb26fbce793.jpg"></a></p><h4 id="1-3-与生成PWM波相关的HAL函数"><a href="#1-3-与生成PWM波相关的HAL函数" class="headerlink" title="1.3 与生成PWM波相关的HAL函数"></a>1.3 与生成PWM波相关的HAL函数</h4><p><a href="https://pic.imgdb.cn/item/63b261575d94efb26fbe1c8f.jpg"><img src="https://pic.imgdb.cn/item/63b261575d94efb26fbe1c8f.jpg"></a></p><h4 id="1-4-STM32CUBEMX配置-固定频率PWM"><a href="#1-4-STM32CUBEMX配置-固定频率PWM" class="headerlink" title="1.4 STM32CUBEMX配置(固定频率PWM)"></a>1.4 STM32CUBEMX配置(固定频率PWM)</h4><p>对于STM32F407ZGT6的TIM14的CH1可以对应引脚到PF9(LED0)，用来控制灯的亮度</p><p>定时器TIM14各选项的意义：</p><ul><li><input disabled="" type="checkbox"> Disable ,禁用通道</li><li><input disabled="" type="checkbox"> Input Capture Direct Mode,直接模式输入捕获</li><li><input disabled="" type="checkbox"> Output Compare No Output,输出比较，不输出到通道引脚</li><li><input disabled="" type="checkbox"> Output Compare CH1,输出比较，输出到通道引脚CH1</li><li><input disabled="" type="checkbox"> PWM Generation No Output,生成PWM，不输出到通道引脚</li><li><input disabled="" type="checkbox"> PWM Generation CH1,生成PWM，输出到通道引脚CH1</li><li><input disabled="" type="checkbox"> Forced Output CH1,强制通道引脚CH1输出某个电平</li></ul><p>PWM模式，选项有PWM Mode 1和PWM Mode 2</p><p>PWM Mode 1-&gt;递增计数模式：CNT&lt;CCR(有效状态)，CNT&gt;CCR(无效状态)</p><p>PWM Mode 2-&gt;递减计数模式：CNT&lt;CCR(无效状态)，CNT&gt;CCR(有效状态)</p><p>Pulse，PWM脉冲宽度，就是设置16位的捕获&#x2F;比较寄存器CCR的值。脉冲宽度的值应该小于计数周期的值</p><p>eg：设置为50，因为计数器的时钟频率是10kHz（对应定时器APB的值，经过Prescaler分频之后的时钟频率（进入计数器的时钟频率）），所以脉冲宽度为5ms</p><p><strong>Output compare preload，输出比较预装载。若Enable，修改CCR值(修改占空比)后立即生效；若Disable，修改CCR之后要等到下一个UEVA事件才会生效。</strong></p><p>Fast Mode，是否使用输出比较快速使能</p><blockquote><p><em><strong>CH Polarity，通道极性，就是CCR与CNT比较输出的有效状态,可以设置为高电平(High）或低电平（(Low)</strong></em></p><p>主程序（固定频率PWM）：</p><p>必须调用函数启动定时器，再启动定时器的PWM输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HAL_TIM_Base_Start_IT(&amp;htim14); <span class="comment">//以中断方式启动TIM14</span></span><br><span class="line">HAL_TIM_PWM_Start_IT(&amp;htim14,TIM_CHANNEL_1);</span><br><span class="line"><span class="comment">//TIM14通道1, 启动生成PWM</span></span><br></pre></td></tr></table></figure><p>主程序（可变频率PWM）：</p><p>重新实现回调函数HAL_TIM_PWM_PulseFinishedCallback()，在此回调函数里编写代码改变占空比。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> pulseWidth=<span class="number">50</span>;<span class="comment">//脉宽</span></span><br><span class="line"><span class="type">uint8_t</span> dirInc=<span class="number">1</span>;<span class="comment">//脉宽变化方向,1=递增,0=递减</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PWM_PulseFinishedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(htim-&gt;Instance != TIM14)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(dirInc==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">pulseWidth++;</span><br><span class="line"><span class="keyword">if</span>(pulseWidth&gt;=<span class="number">195</span>)</span><br><span class="line">&#123;</span><br><span class="line">pulseWidth = <span class="number">195</span>;</span><br><span class="line">dirInc = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pulseWidth--;</span><br><span class="line"><span class="keyword">if</span>(pulseWidth&lt;=<span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">pulseWidth = <span class="number">5</span>;</span><br><span class="line">dirInc=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">__HAL_TIM_SET_COMPARE(&amp;htim14,TIM_CHANNEL_1,pulseWidth);<span class="comment">//设置CCR的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="2-输入PWM"><a href="#2-输入PWM" class="headerlink" title="2. 输入PWM"></a>2. 输入PWM</h3><p>一个定时器产生PWM波，另一个定时器测量这个PWM波，本次采用TIM14的CH1通道(即PF9)来产生PWM波TIM9_CH1测量pwm波。</p><h4 id="2-1-cubemx的配置"><a href="#2-1-cubemx的配置" class="headerlink" title="2.1 cubemx的配置"></a>2.1 cubemx的配置</h4><p><strong>使用定时器TIM9的PWM输入功能测量PWM波参数。TIM9有2个通道，在输入PWM模式下，使两个通道都映射到TIM9_CH1的复用引脚上。</strong></p><p><a href="https://pic.imgdb.cn/item/63b3b2d0be43e0d30e845eda.jpg"><img src="https://pic.imgdb.cn/item/63b3b2d0be43e0d30e845eda.jpg"></a></p><p><a href="https://pic.imgdb.cn/item/63b3b5ffbe43e0d30e898b35.jpg"><img src="https://pic.imgdb.cn/item/63b3b5ffbe43e0d30e898b35.jpg"></a></p><p>由于需要在TIM9的捕获比较中断里读取CCR的值，因此打开TIM9的中断。</p><h3 id="3-基于HAL库的按键检测代码"><a href="#3-基于HAL库的按键检测代码" class="headerlink" title="3.基于HAL库的按键检测代码"></a>3.基于HAL库的按键检测代码</h3><p><a href="https://wwqe.lanzouo.com/iuE7i0kvztyf">https://wwqe.lanzouo.com/iuE7i0kvztyf</a></p><h3 id="4-CUBEMX配置LCD屏幕"><a href="#4-CUBEMX配置LCD屏幕" class="headerlink" title="4.CUBEMX配置LCD屏幕"></a>4.CUBEMX配置LCD屏幕</h3><p><a href="https://pic.imgdb.cn/item/63c25040be43e0d30ef39094.jpg"><img src="https://pic.imgdb.cn/item/63c25040be43e0d30ef39094.jpg"></a></p><p>检查FSMC自动分配的GPIO引脚是否与电路图一致，若不一致直接修改即可。</p><p>设置背光对应的IO</p><p><a href="https://pic.imgdb.cn/item/63c27833be43e0d30e3a8e8c.jpg"><img src="https://pic.imgdb.cn/item/63c27833be43e0d30e3a8e8c.jpg"></a></p><p><a href="https://pic.imgdb.cn/item/63c2609cbe43e0d30e114e3a.jpg"><img src="https://pic.imgdb.cn/item/63c2609cbe43e0d30e114e3a.jpg"></a></p><h3 id="5-基于HAL库改版正点原子TFTLCD驱动程序（HAL）"><a href="#5-基于HAL库改版正点原子TFTLCD驱动程序（HAL）" class="headerlink" title="5.基于HAL库改版正点原子TFTLCD驱动程序（HAL）"></a>5.基于HAL库改版正点原子TFTLCD驱动程序（HAL）</h3><p>基于型号9413，stm32f407zgt6</p><p><a href="https://wwqe.lanzouo.com/igS5X0nv67cf">https://wwqe.lanzouo.com/igS5X0nv67cf</a></p><h3 id="6-基于HAL库改版正点原子HAL库TFTLCD驱动程序（最新版V3）"><a href="#6-基于HAL库改版正点原子HAL库TFTLCD驱动程序（最新版V3）" class="headerlink" title="6.基于HAL库改版正点原子HAL库TFTLCD驱动程序（最新版V3）"></a>6.基于HAL库改版正点原子HAL库TFTLCD驱动程序（最新版V3）</h3><p>改良版程序</p><p><a href="https://wwqe.lanzouo.com/i3nHP0nvqm8b">https://wwqe.lanzouo.com/i3nHP0nvqm8b</a></p><h4 id="6-1-重点"><a href="#6-1-重点" class="headerlink" title="6.1 重点"></a>6.1 重点</h4><p>在最新版的TFTLCD驱动程序中，需要把lcd_ex.c文件在MDK中设置为<em><strong>永不编译</strong></em>的情况</p><p>具体说明连接：<a href="https://blog.csdn.net/qq_25144391/article/details/118959208">https://blog.csdn.net/qq_25144391/article/details/118959208</a></p><p><a href="https://pic.imgdb.cn/item/63ef68d8f144a01007c6b95a.jpg"><img src="https://pic.imgdb.cn/item/63ef68d8f144a01007c6b95a.jpg"></a></p><h3 id="7-实时时钟RTC"><a href="#7-实时时钟RTC" class="headerlink" title="7.实时时钟RTC"></a>7.实时时钟RTC</h3><p>工程连接<a href="https://wwqe.lanzouo.com/iy3Ac0nyb2de">https://wwqe.lanzouo.com/iy3Ac0nyb2de</a></p><p>RTC（Real-time Clock，实时时钟）是由时钟信号驱动的日历时钟，提供日期和时间数据。</p><ul><li><p><input disabled="" type="checkbox"> RTC能提供BCD或二进制的秒、分钟、小时（12或24小时制）、星期几、日期、月份、年份数据</p></li><li><p><input disabled="" type="checkbox"> RTC模块和时钟配置都使用备用存储区域，使用VBAT备用电源，即使主电源断电或系统复位也不影响RTC的工作</p></li><li><p><input disabled="" type="checkbox"> RTC有两个可编程闹钟中断，可以设定任意组合和重复性的闹钟</p></li><li><p><input disabled="" type="checkbox"> 有一个可周期性唤醒的中断，唤醒中断可以当做一个普通定时器使用</p></li><li><p><input disabled="" type="checkbox"> 具有时间戳和入侵检测功能</p></li></ul><p><a href="https://jiangqqpan.github.io/file/RTC.pdf"><strong>RTC文档链接</strong></a></p><h3 id="8-串口USART"><a href="#8-串口USART" class="headerlink" title="8.串口USART"></a>8.串口USART</h3><p>工程连接：<a href="https://wwqe.lanzouo.com/iOpDW0o4r0ri">https://wwqe.lanzouo.com/iOpDW0o4r0ri</a></p><p><a href="https://pic.imgdb.cn/item/63f36902f144a01007ccb145.jpg"><img src="https://pic.imgdb.cn/item/63f36902f144a01007ccb145.jpg"></a></p><h4 id="8-1常用宏函数"><a href="#8-1常用宏函数" class="headerlink" title="8.1常用宏函数"></a>8.1常用宏函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__HAL_UART_ENABLE(__HANDLE__)，使能一个UART口，如</span><br><span class="line">__HAL_UART_ENABLE(&amp;huart1);</span><br><span class="line"></span><br><span class="line">__HAL_UART_ENABLE_IT(__HANDLE__, __INTERRUPT__)，使能某</span><br><span class="line">个中断事件源，如</span><br><span class="line">__HAL_UART_ENABLE_IT(&amp;huart1, UART_IT_RXNE); <span class="comment">//使能接收中断</span></span><br><span class="line">__HAL_UART_ENABLE_IT(&amp;huart1, UART_IT_IDLE); <span class="comment">//使能空闲中断</span></span><br><span class="line"></span><br><span class="line"> __HAL_UART_DISABLE_IT(__HANDLE__, __INTERRUPT__)，禁止</span><br><span class="line">某个中断事件源</span><br><span class="line">     </span><br><span class="line">__HAL_UART_GET_FLAG(__HANDLE__, __FLAG__)，检查一个串口的某个中断标志是否被置位，返回值为宏定义常量SET或</span><br><span class="line">RESET。中断事件标志的宏定义如下：</span><br><span class="line">UART_FLAG_CTS: CTS 信号变化标志</span><br><span class="line">UART_FLAG_LBD: LIN 打断检测标志</span><br><span class="line">UART_FLAG_TXE: 发送数据寄存器空标志</span><br><span class="line">UART_FLAG_TC: 发送完成标志</span><br><span class="line">UART_FLAG_RXNE: 接收数据寄存器非空标志</span><br><span class="line">UART_FLAG_IDLE: 线路空闲标志</span><br><span class="line">UART_FLAG_ORE: 出错误标志</span><br><span class="line">UART_FLAG_NE: 声错误标志</span><br><span class="line">UART_FLAG_FE: 帧错误标志</span><br><span class="line">UART_FLAG_PE: 奇偶校验错误标志</span><br><span class="line">    </span><br><span class="line">__HAL_UART_CLEAR_FLAG(__HANDLE__, __FLAG__)，清除一个UART口的某个事件标志位</span><br></pre></td></tr></table></figure><p><em><strong>注意</strong></em>：注意，HAL_UART_Receive_IT()完成一次数据接收后就关闭了串口接收中断，不会自动进行下一次的接收，需要再次调用HAL_UART_Receive_IT()以启动下一次的接收，但不能在回调函数HAL_UART_RxCpltCallback()里调用HAL_UART_Receive_IT()。</p><p>为了能连续进行中断方式的串口接收，程序的处理方法是：在完成一次接收，并且串口状态为空闲，也就是发生UART_IT_IDLE中断时，对接收到的指令数据进行处理，然后再次调用HAL_UART_Receive_IT()以启动下一次的接收。</p><p><a href="https://jiangqqpan.github.io/file/USART.pdf"><strong>USART文档链接</strong></a></p><h3 id="9-ADC"><a href="#9-ADC" class="headerlink" title="9.ADC"></a>9.ADC</h3><ul><li>ADC转换电压的输入范围范围是VREF-≤VIN≤VREF+，由于VREF-必须与VSSA连接，也就是VREF-总是0，所以STM32F407的片上ADC只能转换正电压。</li><li>选择的多个模拟输入通道可以分为两组：规则通道和注入通道，每个组的通道构成一个转换序列。<ul><li><input disabled="" type="checkbox"> 规则转换序列最多可设置16个通道，一个规则转换序列规定了多路复用转换时的顺序。</li><li><input disabled="" type="checkbox"> 注入通道就是可以在规则通道转换过程中插入进行转换的通道，类似于中断的现象。每个注入通道还可以设置一个数据偏移量，每次转换结果自动减去这个偏移量，所以转换结果可以是负数。</li></ul></li></ul><p> ADC时钟与转换时间：ADCCLK最高42MHz。一个通道一次ADC转换的总时间是N+12个ADCCLK周期，N是设置的采样次数。</p><p><a href="https://pic.imgdb.cn/item/640b1ab7f144a010071312a0.jpg"><img src="https://pic.imgdb.cn/item/640b1ab7f144a010071312a0.jpg"></a></p><p><img src="C:\Users\HP\AppData\Roaming\Typora\typora-user-images\image-20230310195613923.png" alt="image-20230310195613923"></p><p><a href="https://pic.imgdb.cn/item/640b1afbf144a0100713814b.jpg"><img src="https://pic.imgdb.cn/item/640b1afbf144a0100713814b.jpg"></a></p><h4 id="9-1软件启动ADC转换"><a href="#9-1软件启动ADC转换" class="headerlink" title="9.1软件启动ADC转换"></a>9.1软件启动ADC转换</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_ADC_Start</span><span class="params">(ADC_HandleTypeDef* hadc)</span>; </span><br><span class="line"><span class="comment">//软件启动转换</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_ADC_Stop</span><span class="params">(ADC_HandleTypeDef* hadc)</span>; </span><br><span class="line"><span class="comment">//停止转换</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_ADC_PollForConversion</span><span class="params">(ADC_HandleTypeDef* </span></span><br><span class="line"><span class="params">hadc, <span class="type">uint32_t</span> Timeout)</span>;</span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">HAL_ADC_GetValue</span><span class="params">(ADC_HandleTypeDef* hadc)</span>; </span><br><span class="line"><span class="comment">//读取转换结果寄存器的32位数据</span></span><br></pre></td></tr></table></figure><p>其中，参数hadc是ADC外设对象指针，Timeout是超时等待时间，单位是节拍数。</p><p><a href="https://pic.imgdb.cn/item/640b1bc4f144a0100714d760.jpg"><img src="https://pic.imgdb.cn/item/640b1bc4f144a0100714d760.jpg"></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">在mian()函数的<span class="keyword">while</span>循环里，每<span class="number">500</span>毫秒以软件触发方式进行一次ADC转换方式</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">HAL_ADC_Start(&amp;hadc1); <span class="comment">//必须每次启动转换</span></span><br><span class="line"><span class="keyword">if</span> (HAL_ADC_PollForConversion(&amp;hadc1,<span class="number">200</span>)==HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> val=HAL_ADC_GetValue(&amp;hadc1); <span class="comment">//读取转换结果</span></span><br><span class="line">LCD_ShowUintX(orgX,orgY,val, <span class="number">5</span>); <span class="comment">//5位显示，前端补空格</span></span><br><span class="line"><span class="type">uint32_t</span> Volt=<span class="number">3300</span>*val; <span class="comment">//以mV为单位</span></span><br><span class="line">Volt=Volt&gt;&gt;<span class="number">12</span>; <span class="comment">//除以2^12</span></span><br><span class="line">LCD_ShowUintX(voltX,voltY,Volt, <span class="number">4</span>); <span class="comment">//4位显示，前端补空格</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// HAL_ADC_Stop(&amp;hadc1); //无需每次都停止</span></span><br><span class="line">HAL_Delay(<span class="number">500</span>);</span><br><span class="line"><span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="9-2定时器触发ADC转换"><a href="#9-2定时器触发ADC转换" class="headerlink" title="9.2定时器触发ADC转换"></a>9.2定时器触发ADC转换</h4><ul><li>ExternalTriggerConversionSource，设置启动ADC转换的外部触发信号源，这里选择Timer3TriggerOutEvent，也就是定时器TIM3的TRGO信号</li><li>External Trigger Conversion Edge，设置触发转换的跳变沿，这里选择上跳沿，<em><strong>因为<code>TRGO</code>是一个短时正脉冲信号</strong></em></li><li>开启ADC1的全局中断，在转换完成事件（ADC_IT_EOC）中断里读取转换结果。</li></ul><p>TIM3的设置：</p><ul><li>使TIM3定时周期为500ms</li><li>触发事件选择（Trigger Event Selection）设置为Update Event，也就是以UEV事件信号作为TRGO信号、</li></ul><p>回调函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="comment">/* ADC的转换完成事件(ADC_IT_EOC)中断回调函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_ADC_ConvCpltCallback</span><span class="params">(ADC_HandleTypeDef* hadc)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (hadc-&gt;Instance == ADC1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> val=HAL_ADC_GetValue(hadc);<span class="comment">//读取转换结果</span></span><br><span class="line">LCD_ShowUintX(orgX,orgY,val, <span class="number">5</span>); <span class="comment">//5位显示，前端补空格</span></span><br><span class="line"><span class="type">uint32_t</span> Volt=<span class="number">3300</span>*val; <span class="comment">//以mV为单位</span></span><br><span class="line">Volt=Volt&gt;&gt;<span class="number">12</span>; <span class="comment">//除以2^12</span></span><br><span class="line">LCD_ShowUintX(voltX,voltY,Volt, <span class="number">4</span>); <span class="comment">//4位显示，前端补空格</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure><p><a href="https://jiangqqpan.github.io/file/ADC.pdf"><strong>ADC文档链接</strong></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-通用定时器生成PWM波&quot;&gt;&lt;a href=&quot;#1-通用定时器生成PWM波&quot; class=&quot;headerlink&quot; title=&quot;1. 通用定时器生成PWM波&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. 通用定时器生成PWM波&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;1-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>小收藏</title>
    <link href="https://jiangqqpan.github.io/2022/08/24/%E5%B0%8F%E6%94%B6%E8%97%8F/"/>
    <id>https://jiangqqpan.github.io/2022/08/24/%E5%B0%8F%E6%94%B6%E8%97%8F/</id>
    <published>2022-08-24T09:04:12.000Z</published>
    <updated>2022-12-31T04:31:46.393Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="vscode-好用的一些小插件"><a href="#vscode-好用的一些小插件" class="headerlink" title="vscode 好用的一些小插件"></a><a href="https://blog.csdn.net/To_be_a_fisher/article/details/125681106">vscode 好用的一些小插件</a></h2><hr><h2 id="在线思维导图绘制"><a href="#在线思维导图绘制" class="headerlink" title="在线思维导图绘制"></a><a href="https://boardmix.cn/">在线思维导图绘制</a></h2><hr><h2 id="降重软件（秘塔写作猫）"><a href="#降重软件（秘塔写作猫）" class="headerlink" title="降重软件（秘塔写作猫）"></a><a href="https://xiezuocat.com/#/">降重软件（秘塔写作猫）</a></h2><hr><h2 id="Canva可画"><a href="#Canva可画" class="headerlink" title="Canva可画"></a><a href="https://www.canva.cn/">Canva可画</a></h2><hr><h2 id="一个不错的免费图床-聚合图床"><a href="#一个不错的免费图床-聚合图床" class="headerlink" title="一个不错的免费图床(聚合图床)"></a><a href="https://www.superbed.cn/">一个不错的免费图床(<strong>聚合图床</strong>)</a></h2><hr><h2 id="微软恢复工具MediaCreationTool使用方法"><a href="#微软恢复工具MediaCreationTool使用方法" class="headerlink" title="微软恢复工具MediaCreationTool使用方法"></a><a href="https://jiangqqpan.github.io/file/%E5%BE%AE%E8%BD%AF%E6%81%A2%E5%A4%8D%E5%B7%A5%E5%85%B7MediaCreationTool%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.pdf">微软恢复工具MediaCreationTool使用方法</a></h2><hr><h2 id="QuartusII-13-1安装及破解"><a href="#QuartusII-13-1安装及破解" class="headerlink" title="QuartusII_13.1安装及破解"></a><a href="https://blog.csdn.net/weixin_46075647/article/details/123381037">QuartusII_13.1安装及破解</a></h2><hr><h2 id="Modelsim-SE-64-10-4破解"><a href="#Modelsim-SE-64-10-4破解" class="headerlink" title="Modelsim SE-64 10.4破解"></a><a href="https://blog.csdn.net/Lily_9/article/details/80325362">Modelsim SE-64 10.4破解</a></h2><hr><h2 id="proteus8-9仿真闪退怎么解决"><a href="#proteus8-9仿真闪退怎么解决" class="headerlink" title="proteus8.9仿真闪退怎么解决"></a><a href="https://blog.csdn.net/qq_52074345/article/details/123762577">proteus8.9仿真闪退怎么解决</a></h2><hr><h2 id="注册表修复清理工具-CCleaner"><a href="#注册表修复清理工具-CCleaner" class="headerlink" title="注册表修复清理工具 CCleaner"></a>注册表修复清理工具 CCleaner</h2><h3 id="Keil-MDK5修改配色"><a href="#Keil-MDK5修改配色" class="headerlink" title="Keil MDK5修改配色"></a><a href="https://www.codenong.com/cs105389576/">Keil MDK5修改配色</a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;vscode-好用的一些小插件&quot;&gt;&lt;a href=&quot;#vscode-好用的一些小插件&quot; class=&quot;headerlink&quot; title=&quot;vscode 好用的一些小插件&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.csdn.net/To_be</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://jiangqqpan.github.io/2022/07/24/hello-world/"/>
    <id>https://jiangqqpan.github.io/2022/07/24/hello-world/</id>
    <published>2022-07-24T00:51:02.847Z</published>
    <updated>2022-08-25T07:07:43.421Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HEXO博客搭建教程</title>
    <link href="https://jiangqqpan.github.io/2022/07/23/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <id>https://jiangqqpan.github.io/2022/07/23/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</id>
    <published>2022-07-23T07:59:44.000Z</published>
    <updated>2022-08-28T01:34:54.577Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="hexo-上传部署命令"><a href="#hexo-上传部署命令" class="headerlink" title="hexo 上传部署命令"></a>hexo 上传部署命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure><hr><h2 id="HEXO搭建详细教程"><a href="#HEXO搭建详细教程" class="headerlink" title="HEXO搭建详细教程"></a><a href="https://jiangqqpan.github.io/file/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B.pdf">HEXO搭建详细教程</a></h2><hr><h2 id="hexo-上传PDF文件方法"><a href="#hexo-上传PDF文件方法" class="headerlink" title="hexo 上传PDF文件方法"></a>hexo 上传PDF文件方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">示例中的https://jiangqqpan.github.io/file/代表自己的上传github的PDF文件的根地址</span><br><span class="line">[HEXO搭建详细教程](https://jiangqqpan.github.io/file/博客搭建详细教程.pdf)</span><br></pre></td></tr></table></figure><hr><h2 id="HEXO美化教程"><a href="#HEXO美化教程" class="headerlink" title="HEXO美化教程"></a><a href="https://tzy1997.com/articles/hexo1606/">HEXO美化教程</a></h2><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;hexo-上传部署命令&quot;&gt;&lt;a href=&quot;#hexo-上传部署命令&quot; class=&quot;headerlink&quot; title=&quot;hexo 上传部署命令&quot;&gt;&lt;/a&gt;hexo 上传部署命令&lt;/h2&gt;&lt;figure class=&quot;highlight plainte</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HEXO问题解决方案</title>
    <link href="https://jiangqqpan.github.io/2022/07/22/HEXO%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://jiangqqpan.github.io/2022/07/22/HEXO%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2022-07-22T08:35:49.000Z</published>
    <updated>2022-08-25T07:08:19.235Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="/images/1.png"><br><img src="/images/1_1.png"></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/images/1.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/1_1.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Stm32小知识</title>
    <link href="https://jiangqqpan.github.io/2022/07/19/Stm32%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <id>https://jiangqqpan.github.io/2022/07/19/Stm32%E5%B0%8F%E7%9F%A5%E8%AF%86/</id>
    <published>2022-07-19T13:45:18.000Z</published>
    <updated>2022-08-25T07:40:43.043Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="STM32-keil下载程序后不自动运行程序-必须复位（或重新上电）一下才可以运行"><a href="#STM32-keil下载程序后不自动运行程序-必须复位（或重新上电）一下才可以运行" class="headerlink" title="STM32 keil下载程序后不自动运行程序,必须复位（或重新上电）一下才可以运行"></a><a href="https://blog.csdn.net/jiekaile/article/details/120779350">STM32 keil下载程序后不自动运行程序,必须复位（或重新上电）一下才可以运行</a></h2><hr><h2 id="keil-L6200E-Symbol-XXX-multiply-defined-O…错误解决方法"><a href="#keil-L6200E-Symbol-XXX-multiply-defined-O…错误解决方法" class="headerlink" title="[keil]L6200E: Symbol XXX multiply defined .O…错误解决方法"></a><a href="https://blog.csdn.net/MoreXD/article/details/121979087">[keil]L6200E: Symbol XXX multiply defined .O…错误解决方法</a></h2><hr><h2 id="HAL库移植7脚SPI-OLED"><a href="#HAL库移植7脚SPI-OLED" class="headerlink" title="HAL库移植7脚SPI OLED"></a><a href="https://blog.csdn.net/qq_45822269/article/details/116787925">HAL库移植7脚SPI OLED</a></h2><hr><h2 id="HAL库-CubeMX–OLED显示小数和不同数据类型的变量值的显示"><a href="#HAL库-CubeMX–OLED显示小数和不同数据类型的变量值的显示" class="headerlink" title="HAL库 CubeMX–OLED显示小数和不同数据类型的变量值的显示"></a><a href="https://blog.csdn.net/m0_51429690/article/details/119778340">HAL库 CubeMX–OLED显示小数和不同数据类型的变量值的显示</a></h2><hr><h2 id="STM32CubeMX-ESP8266-AT指令实现MQTT协议并接入阿里云IOT平台"><a href="#STM32CubeMX-ESP8266-AT指令实现MQTT协议并接入阿里云IOT平台" class="headerlink" title="STM32CubeMX ESP8266 AT指令实现MQTT协议并接入阿里云IOT平台"></a><a href="https://blog.csdn.net/u014779536/article/details/106355346">STM32CubeMX ESP8266 AT指令实现MQTT协议并接入阿里云IOT平台</a></h2><hr><p><a href="https://blog.csdn.net/m0_61213696/article/details/123227712">枚举类型简介</a><br><img src="/images/%E6%9E%9A%E4%B8%BE.png"><br><img src="/images/DAC1.png"></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;STM32-keil下载程序后不自动运行程序-必须复位（或重新上电）一下才可以运行&quot;&gt;&lt;a href=&quot;#STM32-keil下载程序后不自动运行程序-必须复位（或重新上电）一下才可以运行&quot; class=&quot;headerlink&quot; title=&quot;STM32</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ESP32</title>
    <link href="https://jiangqqpan.github.io/2022/03/27/ESP32/"/>
    <id>https://jiangqqpan.github.io/2022/03/27/ESP32/</id>
    <published>2022-03-27T03:05:52.000Z</published>
    <updated>2022-08-25T07:07:24.354Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>STM32CUBEMX</title>
    <link href="https://jiangqqpan.github.io/2022/03/27/STM32CUBEMX/"/>
    <id>https://jiangqqpan.github.io/2022/03/27/STM32CUBEMX/</id>
    <published>2022-03-27T03:05:28.000Z</published>
    <updated>2022-08-25T07:08:36.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="STM32-CubeMx使用教程一–安装教程"><a href="#STM32-CubeMx使用教程一–安装教程" class="headerlink" title="STM32 CubeMx使用教程一–安装教程"></a><a href="https://blog.csdn.net/as480133937/article/details/98885316">STM32 CubeMx使用教程一–安装教程</a></h2><h2 id="STM32CubeMX教程二–基本使用-新建工程点亮LED灯"><a href="#STM32CubeMX教程二–基本使用-新建工程点亮LED灯" class="headerlink" title="STM32CubeMX教程二–基本使用(新建工程点亮LED灯)"></a><a href="https://blog.csdn.net/as480133937/article/details/98947162">STM32CubeMX教程二–基本使用(新建工程点亮LED灯)</a></h2><h2 id="HAL库-STM32CubeMX教程三—-外部中断-HAL库GPIO讲解"><a href="#HAL库-STM32CubeMX教程三—-外部中断-HAL库GPIO讲解" class="headerlink" title="HAL库 STM32CubeMX教程三—-外部中断(HAL库GPIO讲解)"></a><a href="https://blog.csdn.net/as480133937/article/details/98983268">HAL库 STM32CubeMX教程三—-外部中断(HAL库GPIO讲解)</a></h2><h2 id="HAL库-STM32CubeMX教程四—UART串口通信详解"><a href="#HAL库-STM32CubeMX教程四—UART串口通信详解" class="headerlink" title="HAL库 STM32CubeMX教程四—UART串口通信详解"></a><a href="https://blog.csdn.net/as480133937/article/details/99073783">HAL库 STM32CubeMX教程四—UART串口通信详解</a></h2><h2 id="HAL库-STM32CubeMX教程五—-看门狗-独立看门狗-窗口看门狗"><a href="#HAL库-STM32CubeMX教程五—-看门狗-独立看门狗-窗口看门狗" class="headerlink" title="HAL库 STM32CubeMX教程五—-看门狗(独立看门狗,窗口看门狗)"></a><a href="https://blog.csdn.net/as480133937/article/details/99121645">HAL库 STM32CubeMX教程五—-看门狗(独立看门狗,窗口看门狗)</a></h2><h2 id="HAL库-STM32CubeMX教程六—-定时器中断"><a href="#HAL库-STM32CubeMX教程六—-定时器中断" class="headerlink" title="HAL库 STM32CubeMX教程六—-定时器中断"></a><a href="https://blog.csdn.net/as480133937/article/details/99201209">HAL库 STM32CubeMX教程六—-定时器中断</a></h2><h2 id="HAL库-STM32CubeMX教程七—PWM输出-呼吸灯"><a href="#HAL库-STM32CubeMX教程七—PWM输出-呼吸灯" class="headerlink" title="HAL库 STM32CubeMX教程七—PWM输出(呼吸灯)"></a><a href="https://blog.csdn.net/as480133937/article/details/99231677">HAL库 STM32CubeMX教程七—PWM输出(呼吸灯)</a></h2><h2 id="HAL库-STM32CubeMX教程八—定时器输入捕获"><a href="#HAL库-STM32CubeMX教程八—定时器输入捕获" class="headerlink" title="HAL库 STM32CubeMX教程八—定时器输入捕获"></a><a href="https://blog.csdn.net/as480133937/article/details/99407485">HAL库 STM32CubeMX教程八—定时器输入捕获</a></h2><h2 id="HAL库-STM32CubeMX教程九—ADC"><a href="#HAL库-STM32CubeMX教程九—ADC" class="headerlink" title="HAL库 STM32CubeMX教程九—ADC"></a><a href="https://blog.csdn.net/as480133937/article/details/99627062">HAL库 STM32CubeMX教程九—ADC</a></h2><h2 id="HAL库-STM32CubeMX教程十—DAC"><a href="#HAL库-STM32CubeMX教程十—DAC" class="headerlink" title="HAL库 STM32CubeMX教程十—DAC"></a><a href="https://blog.csdn.net/as480133937/article/details/102309242">HAL库 STM32CubeMX教程十—DAC</a></h2><h2 id="HAL库-STM32CubeMX教程十一—DMA-串口DMA发送接收"><a href="#HAL库-STM32CubeMX教程十一—DMA-串口DMA发送接收" class="headerlink" title="HAL库 STM32CubeMX教程十一—DMA (串口DMA发送接收)"></a><a href="https://blog.csdn.net/as480133937/article/details/104827639">HAL库 STM32CubeMX教程十一—DMA (串口DMA发送接收)</a></h2><h2 id="HAL库-STM32CubeMX教程十二—IIC-读取AT24C02"><a href="#HAL库-STM32CubeMX教程十二—IIC-读取AT24C02" class="headerlink" title="HAL库 STM32CubeMX教程十二—IIC(读取AT24C02 )"></a><a href="https://blog.csdn.net/as480133937/article/details/105259075">HAL库 STM32CubeMX教程十二—IIC(读取AT24C02 )</a></h2><h2 id="HAL库-STM32CubeMX教程十四—SPI"><a href="#HAL库-STM32CubeMX教程十四—SPI" class="headerlink" title="HAL库 STM32CubeMX教程十四—SPI"></a><a href="https://blog.csdn.net/as480133937/article/details/105849607?spm=1001.2014.3001.5502">HAL库 STM32CubeMX教程十四—SPI</a></h2><h2 id="STM32-HAL-CubeMX-串口IDLE接收空闲中断-DMA"><a href="#STM32-HAL-CubeMX-串口IDLE接收空闲中断-DMA" class="headerlink" title="STM32 HAL CubeMX 串口IDLE接收空闲中断+DMA"></a><a href="https://blog.csdn.net/as480133937/article/details/105013368">STM32 HAL CubeMX 串口IDLE接收空闲中断+DMA</a></h2><h2 id="PWM原理-PWM频率与占空比详解"><a href="#PWM原理-PWM频率与占空比详解" class="headerlink" title="PWM原理 PWM频率与占空比详解"></a><a href="https://blog.csdn.net/as480133937/article/details/103439546">PWM原理 PWM频率与占空比详解</a></h2><hr><h1 id="IO口的设置"><a href="#IO口的设置" class="headerlink" title="IO口的设置"></a>IO口的设置</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GPIO output level   引脚电平设置   高/低</span><br><span class="line">GPIO mode   GPIO模式     推挽输出/开漏输出</span><br><span class="line">GPIO Pull-up/Pull-dowm   上拉下拉电阻      上拉电阻/下拉电阻/无上拉或下拉</span><br><span class="line">Maxinum output speed   引脚速度设置   低速/中速/高速</span><br><span class="line">User Label    用户标签   给引脚设置名称  如LED0</span><br></pre></td></tr></table></figure><h1 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h1><h2 id="串口DMA及中断回调"><a href="#串口DMA及中断回调" class="headerlink" title="串口DMA及中断回调"></a><a href="https://www.cnblogs.com/lailai-laird/p/12618786.html">串口DMA及中断回调</a></h2><h2 id="串口-蓝牙模块"><a href="#串口-蓝牙模块" class="headerlink" title="串口+蓝牙模块"></a>串口+蓝牙模块</h2><p> <a href="https://blog.csdn.net/qq_42652838/article/details/107776265?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2.pc_relevant_paycolumn_v3&utm_relevant_index=5">串口+蓝牙模块网页教程</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在进行通过蓝牙的返回值判断数据的时候要特别注意（所有数据都是以HEX对应的值发回来的，例如A=0X41,</span><br><span class="line">最好不要用数字作为返回数据，以免出现习惯性的错误）</span><br><span class="line">（蓝牙手机APP一般需要在打开定位的情况下才能检测到蓝牙设备或模块）</span><br></pre></td></tr></table></figure><h2 id="串口重新定义函数"><a href="#串口重新定义函数" class="headerlink" title="串口重新定义函数"></a>串口重新定义函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">重新定义<span class="built_in">printf</span>函数</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> UART_HandleTypeDef huart1;   <span class="comment">//声明串口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数功能: 重定向c库函数printf到USART1</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">  HAL_UART_Transmit(&amp;huart1, (<span class="type">uint8_t</span> *)&amp;ch, <span class="number">1</span>, <span class="number">0xffff</span>);</span><br><span class="line">  <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//函数功能: 重定向c库函数getchar,scanf到USART1</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fgetc</span><span class="params">(FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint8_t</span> ch = <span class="number">0</span>;</span><br><span class="line">  HAL_UART_Receive(&amp;huart1, &amp;ch, <span class="number">1</span>, <span class="number">0xffff</span>);</span><br><span class="line">  <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="串口使用微库"><a href="#串口使用微库" class="headerlink" title="串口使用微库"></a>串口使用微库</h2><p><img src="/images/%E5%BE%AE%E5%BA%93.png"></p><h1 id="ADC小知识点"><a href="#ADC小知识点" class="headerlink" title="ADC小知识点"></a>ADC小知识点</h1><hr><p><img src="/images/adc4.png"><br><img src="/images/adc1.png"><br><img src="/images/adc2.png"><br><img src="/images/adc3.png"></p><hr><h1 id="基于STM32CUBEMX的TFT-LCDJ配置教程"><a href="#基于STM32CUBEMX的TFT-LCDJ配置教程" class="headerlink" title="基于STM32CUBEMX的TFT_LCDJ配置教程"></a>基于STM32CUBEMX的TFT_LCDJ配置教程</h1><h2 id="TFT-LCD"><a href="#TFT-LCD" class="headerlink" title="TFT_LCD"></a><a href="https://blog.csdn.net/weixin_43892323/article/details/107305536">TFT_LCD</a></h2><h1 id="STM32HAL-ADC-TIM-DMA采集交流信号-基于cubemx"><a href="#STM32HAL-ADC-TIM-DMA采集交流信号-基于cubemx" class="headerlink" title="STM32HAL ADC+TIM+DMA采集交流信号 基于cubemx"></a><a href="https://blog.csdn.net/qq_34022877/article/details/121941236?spm=1001.2101.3001.6650.12&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-12.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-12.pc_relevant_default&utm_relevant_index=18">STM32HAL ADC+TIM+DMA采集交流信号 基于cubemx</a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h1&gt;&lt;h2 id=&quot;STM32-CubeMx使用教程一–安装教程&quot;&gt;&lt;a href=&quot;#STM32-CubeMx使用教程一–安装教程&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
</feed>
